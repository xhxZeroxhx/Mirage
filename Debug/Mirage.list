
Mirage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c28  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d34  08000d34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d58  08000d58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d58  08000d58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d58  08000d58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d58  08000d58  00010d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d5c  08000d5c  00010d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000d6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000d6c  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074f9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013d7  00000000  00000000  0002752e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000010cd  00000000  00000000  00028905  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000350  00000000  00000000  000299d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000348  00000000  00000000  00029d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00013cd9  00000000  00000000  0002a070  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004686  00000000  00000000  0003dd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000688f6  00000000  00000000  000423cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000aacc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006cc  00000000  00000000  000aad40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000d1c 	.word	0x08000d1c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000d1c 	.word	0x08000d1c

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f896 	bl	8000294 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f857 	bl	800022c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f82f 	bl	8000208 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f000 fd16 	bl	8000be0 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000028 	.word	0x20000028
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001e0:	b538      	push	{r3, r4, r5, lr}
 80001e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e4:	f7ff fff6 	bl	80001d4 <HAL_GetTick>
 80001e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ee:	d002      	beq.n	80001f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <HAL_Delay+0x24>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f6:	f7ff ffed 	bl	80001d4 <HAL_GetTick>
 80001fa:	1b40      	subs	r0, r0, r5
 80001fc:	42a0      	cmp	r0, r4
 80001fe:	d3fa      	bcc.n	80001f6 <HAL_Delay+0x16>
  {
  }
}
 8000200:	bd38      	pop	{r3, r4, r5, pc}
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000

08000208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800020a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000210:	041b      	lsls	r3, r3, #16
 8000212:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000214:	0200      	lsls	r0, r0, #8
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800021a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800021c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000220:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000224:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800022c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <HAL_NVIC_SetPriority+0x60>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000236:	f1c3 0407 	rsb	r4, r3, #7
 800023a:	2c04      	cmp	r4, #4
 800023c:	bf28      	it	cs
 800023e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	1d1d      	adds	r5, r3, #4
 8000242:	2d06      	cmp	r5, #6
 8000244:	d918      	bls.n	8000278 <HAL_NVIC_SetPriority+0x4c>
 8000246:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	f04f 35ff 	mov.w	r5, #4294967295
 800024c:	fa05 f404 	lsl.w	r4, r5, r4
 8000250:	ea21 0104 	bic.w	r1, r1, r4
 8000254:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000256:	fa05 f303 	lsl.w	r3, r5, r3
 800025a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000260:	2800      	cmp	r0, #0
 8000262:	db0b      	blt.n	800027c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	0109      	lsls	r1, r1, #4
 8000266:	b2c9      	uxtb	r1, r1
 8000268:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800026c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000270:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	2300      	movs	r3, #0
 800027a:	e7e5      	b.n	8000248 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f000 000f 	and.w	r0, r0, #15
 8000280:	0109      	lsls	r1, r1, #4
 8000282:	b2c9      	uxtb	r1, r1
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <HAL_NVIC_SetPriority+0x64>)
 8000286:	5419      	strb	r1, [r3, r0]
 8000288:	e7f4      	b.n	8000274 <HAL_NVIC_SetPriority+0x48>
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000ed14 	.word	0xe000ed14

08000294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000294:	3801      	subs	r0, #1
 8000296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029a:	d20a      	bcs.n	80002b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x24>)
 800029e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x28>)
 80002a2:	21f0      	movs	r1, #240	; 0xf0
 80002a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a8:	2000      	movs	r0, #0
 80002aa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ac:	2207      	movs	r2, #7
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010
 80002bc:	e000ed00 	.word	0xe000ed00

080002c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002c4:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002c6:	4635      	mov	r5, r6
 80002c8:	e0a1      	b.n	800040e <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ca:	2c00      	cmp	r4, #0
 80002cc:	d059      	beq.n	8000382 <HAL_GPIO_Init+0xc2>
 80002ce:	2c01      	cmp	r4, #1
 80002d0:	d100      	bne.n	80002d4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002d2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002d4:	2bff      	cmp	r3, #255	; 0xff
 80002d6:	d868      	bhi.n	80003aa <HAL_GPIO_Init+0xea>
 80002d8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002da:	2bff      	cmp	r3, #255	; 0xff
 80002dc:	d868      	bhi.n	80003b0 <HAL_GPIO_Init+0xf0>
 80002de:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002e0:	f8dc 2000 	ldr.w	r2, [ip]
 80002e4:	270f      	movs	r7, #15
 80002e6:	40a7      	lsls	r7, r4
 80002e8:	ea22 0207 	bic.w	r2, r2, r7
 80002ec:	fa06 f404 	lsl.w	r4, r6, r4
 80002f0:	4322      	orrs	r2, r4
 80002f2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002f6:	684a      	ldr	r2, [r1, #4]
 80002f8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80002fc:	f000 8086 	beq.w	800040c <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000300:	4a5e      	ldr	r2, [pc, #376]	; (800047c <HAL_GPIO_Init+0x1bc>)
 8000302:	6994      	ldr	r4, [r2, #24]
 8000304:	f044 0401 	orr.w	r4, r4, #1
 8000308:	6194      	str	r4, [r2, #24]
 800030a:	6992      	ldr	r2, [r2, #24]
 800030c:	f002 0201 	and.w	r2, r2, #1
 8000310:	9201      	str	r2, [sp, #4]
 8000312:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000314:	08ac      	lsrs	r4, r5, #2
 8000316:	1ca7      	adds	r7, r4, #2
 8000318:	4a59      	ldr	r2, [pc, #356]	; (8000480 <HAL_GPIO_Init+0x1c0>)
 800031a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800031e:	f005 0703 	and.w	r7, r5, #3
 8000322:	00bf      	lsls	r7, r7, #2
 8000324:	f04f 0c0f 	mov.w	ip, #15
 8000328:	fa0c fc07 	lsl.w	ip, ip, r7
 800032c:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000330:	4a54      	ldr	r2, [pc, #336]	; (8000484 <HAL_GPIO_Init+0x1c4>)
 8000332:	4290      	cmp	r0, r2
 8000334:	d042      	beq.n	80003bc <HAL_GPIO_Init+0xfc>
 8000336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800033a:	4290      	cmp	r0, r2
 800033c:	d07f      	beq.n	800043e <HAL_GPIO_Init+0x17e>
 800033e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000342:	4290      	cmp	r0, r2
 8000344:	d07d      	beq.n	8000442 <HAL_GPIO_Init+0x182>
 8000346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800034a:	4290      	cmp	r0, r2
 800034c:	d034      	beq.n	80003b8 <HAL_GPIO_Init+0xf8>
 800034e:	2204      	movs	r2, #4
 8000350:	e035      	b.n	80003be <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8000352:	4f4d      	ldr	r7, [pc, #308]	; (8000488 <HAL_GPIO_Init+0x1c8>)
 8000354:	42bc      	cmp	r4, r7
 8000356:	d014      	beq.n	8000382 <HAL_GPIO_Init+0xc2>
 8000358:	d90b      	bls.n	8000372 <HAL_GPIO_Init+0xb2>
 800035a:	4f4c      	ldr	r7, [pc, #304]	; (800048c <HAL_GPIO_Init+0x1cc>)
 800035c:	42bc      	cmp	r4, r7
 800035e:	d010      	beq.n	8000382 <HAL_GPIO_Init+0xc2>
 8000360:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000364:	42bc      	cmp	r4, r7
 8000366:	d00c      	beq.n	8000382 <HAL_GPIO_Init+0xc2>
 8000368:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800036c:	42bc      	cmp	r4, r7
 800036e:	d1b1      	bne.n	80002d4 <HAL_GPIO_Init+0x14>
 8000370:	e007      	b.n	8000382 <HAL_GPIO_Init+0xc2>
 8000372:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000376:	42bc      	cmp	r4, r7
 8000378:	d003      	beq.n	8000382 <HAL_GPIO_Init+0xc2>
 800037a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800037e:	42bc      	cmp	r4, r7
 8000380:	d1a8      	bne.n	80002d4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000382:	688c      	ldr	r4, [r1, #8]
 8000384:	b17c      	cbz	r4, 80003a6 <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000386:	2c01      	cmp	r4, #1
 8000388:	d008      	beq.n	800039c <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800038a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800038c:	2608      	movs	r6, #8
 800038e:	e7a1      	b.n	80002d4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000390:	68ce      	ldr	r6, [r1, #12]
 8000392:	3608      	adds	r6, #8
          break;
 8000394:	e79e      	b.n	80002d4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000396:	68ce      	ldr	r6, [r1, #12]
 8000398:	360c      	adds	r6, #12
          break;
 800039a:	e79b      	b.n	80002d4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800039c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800039e:	2608      	movs	r6, #8
 80003a0:	e798      	b.n	80002d4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003a2:	2600      	movs	r6, #0
 80003a4:	e796      	b.n	80002d4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003a6:	2604      	movs	r6, #4
 80003a8:	e794      	b.n	80002d4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003aa:	f100 0c04 	add.w	ip, r0, #4
 80003ae:	e794      	b.n	80002da <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003b0:	f1a5 0408 	sub.w	r4, r5, #8
 80003b4:	00a4      	lsls	r4, r4, #2
 80003b6:	e793      	b.n	80002e0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b8:	2203      	movs	r2, #3
 80003ba:	e000      	b.n	80003be <HAL_GPIO_Init+0xfe>
 80003bc:	2200      	movs	r2, #0
 80003be:	40ba      	lsls	r2, r7
 80003c0:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 80003c4:	3402      	adds	r4, #2
 80003c6:	4f2e      	ldr	r7, [pc, #184]	; (8000480 <HAL_GPIO_Init+0x1c0>)
 80003c8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003cc:	684a      	ldr	r2, [r1, #4]
 80003ce:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80003d2:	d038      	beq.n	8000446 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003d4:	4c2e      	ldr	r4, [pc, #184]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 80003d6:	6822      	ldr	r2, [r4, #0]
 80003d8:	431a      	orrs	r2, r3
 80003da:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003dc:	684a      	ldr	r2, [r1, #4]
 80003de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80003e2:	d036      	beq.n	8000452 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003e4:	4c2a      	ldr	r4, [pc, #168]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 80003e6:	6862      	ldr	r2, [r4, #4]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003ec:	684a      	ldr	r2, [r1, #4]
 80003ee:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80003f2:	d034      	beq.n	800045e <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003f4:	4c26      	ldr	r4, [pc, #152]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 80003f6:	68a2      	ldr	r2, [r4, #8]
 80003f8:	431a      	orrs	r2, r3
 80003fa:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003fc:	684a      	ldr	r2, [r1, #4]
 80003fe:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8000402:	d032      	beq.n	800046a <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000404:	4c22      	ldr	r4, [pc, #136]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 8000406:	68e2      	ldr	r2, [r4, #12]
 8000408:	4313      	orrs	r3, r2
 800040a:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800040c:	3501      	adds	r5, #1
 800040e:	2d0f      	cmp	r5, #15
 8000410:	d831      	bhi.n	8000476 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 8000412:	2201      	movs	r2, #1
 8000414:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000416:	680b      	ldr	r3, [r1, #0]
 8000418:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800041a:	429a      	cmp	r2, r3
 800041c:	d1f6      	bne.n	800040c <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 800041e:	684c      	ldr	r4, [r1, #4]
 8000420:	2c12      	cmp	r4, #18
 8000422:	d0b8      	beq.n	8000396 <HAL_GPIO_Init+0xd6>
 8000424:	d895      	bhi.n	8000352 <HAL_GPIO_Init+0x92>
 8000426:	2c02      	cmp	r4, #2
 8000428:	d0b2      	beq.n	8000390 <HAL_GPIO_Init+0xd0>
 800042a:	f67f af4e 	bls.w	80002ca <HAL_GPIO_Init+0xa>
 800042e:	2c03      	cmp	r4, #3
 8000430:	d0b7      	beq.n	80003a2 <HAL_GPIO_Init+0xe2>
 8000432:	2c11      	cmp	r4, #17
 8000434:	f47f af4e 	bne.w	80002d4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000438:	68ce      	ldr	r6, [r1, #12]
 800043a:	3604      	adds	r6, #4
          break;
 800043c:	e74a      	b.n	80002d4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800043e:	2201      	movs	r2, #1
 8000440:	e7bd      	b.n	80003be <HAL_GPIO_Init+0xfe>
 8000442:	2202      	movs	r2, #2
 8000444:	e7bb      	b.n	80003be <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000446:	4c12      	ldr	r4, [pc, #72]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 8000448:	6822      	ldr	r2, [r4, #0]
 800044a:	ea22 0203 	bic.w	r2, r2, r3
 800044e:	6022      	str	r2, [r4, #0]
 8000450:	e7c4      	b.n	80003dc <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000452:	4c0f      	ldr	r4, [pc, #60]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 8000454:	6862      	ldr	r2, [r4, #4]
 8000456:	ea22 0203 	bic.w	r2, r2, r3
 800045a:	6062      	str	r2, [r4, #4]
 800045c:	e7c6      	b.n	80003ec <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 8000460:	68a2      	ldr	r2, [r4, #8]
 8000462:	ea22 0203 	bic.w	r2, r2, r3
 8000466:	60a2      	str	r2, [r4, #8]
 8000468:	e7c8      	b.n	80003fc <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800046a:	4c09      	ldr	r4, [pc, #36]	; (8000490 <HAL_GPIO_Init+0x1d0>)
 800046c:	68e2      	ldr	r2, [r4, #12]
 800046e:	ea22 0303 	bic.w	r3, r2, r3
 8000472:	60e3      	str	r3, [r4, #12]
 8000474:	e7ca      	b.n	800040c <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8000476:	b002      	add	sp, #8
 8000478:	bcf0      	pop	{r4, r5, r6, r7}
 800047a:	4770      	bx	lr
 800047c:	40021000 	.word	0x40021000
 8000480:	40010000 	.word	0x40010000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	40010400 	.word	0x40010400

08000494 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000494:	b912      	cbnz	r2, 800049c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000496:	0409      	lsls	r1, r1, #16
 8000498:	6101      	str	r1, [r0, #16]
  }
}
 800049a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800049c:	6101      	str	r1, [r0, #16]
 800049e:	4770      	bx	lr

080004a0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004a0:	68c3      	ldr	r3, [r0, #12]
 80004a2:	4059      	eors	r1, r3
 80004a4:	60c1      	str	r1, [r0, #12]
}
 80004a6:	4770      	bx	lr

080004a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80004a8:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <RCC_Delay+0x24>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <RCC_Delay+0x28>)
 80004b0:	fba2 2303 	umull	r2, r3, r2, r3
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	fb00 f003 	mul.w	r0, r0, r3
 80004ba:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80004bc:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80004be:	9b01      	ldr	r3, [sp, #4]
 80004c0:	1e5a      	subs	r2, r3, #1
 80004c2:	9201      	str	r2, [sp, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d1f9      	bne.n	80004bc <RCC_Delay+0x14>
}
 80004c8:	b002      	add	sp, #8
 80004ca:	4770      	bx	lr
 80004cc:	20000008 	.word	0x20000008
 80004d0:	10624dd3 	.word	0x10624dd3

080004d4 <HAL_RCC_OscConfig>:
{
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004da:	6803      	ldr	r3, [r0, #0]
 80004dc:	f013 0f01 	tst.w	r3, #1
 80004e0:	d02c      	beq.n	800053c <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004e2:	4bab      	ldr	r3, [pc, #684]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	f003 030c 	and.w	r3, r3, #12
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d01d      	beq.n	800052a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ee:	4ba8      	ldr	r3, [pc, #672]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f003 030c 	and.w	r3, r3, #12
 80004f6:	2b08      	cmp	r3, #8
 80004f8:	d012      	beq.n	8000520 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fa:	6863      	ldr	r3, [r4, #4]
 80004fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000500:	d041      	beq.n	8000586 <HAL_RCC_OscConfig+0xb2>
 8000502:	2b00      	cmp	r3, #0
 8000504:	d155      	bne.n	80005b2 <HAL_RCC_OscConfig+0xde>
 8000506:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800050a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	e037      	b.n	8000590 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000520:	4b9b      	ldr	r3, [pc, #620]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000528:	d0e7      	beq.n	80004fa <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800052a:	4b99      	ldr	r3, [pc, #612]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000532:	d003      	beq.n	800053c <HAL_RCC_OscConfig+0x68>
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	f000 81ae 	beq.w	8000898 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	f013 0f02 	tst.w	r3, #2
 8000542:	d076      	beq.n	8000632 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000544:	4b92      	ldr	r3, [pc, #584]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f013 0f0c 	tst.w	r3, #12
 800054c:	d05f      	beq.n	800060e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800054e:	4b90      	ldr	r3, [pc, #576]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	f003 030c 	and.w	r3, r3, #12
 8000556:	2b08      	cmp	r3, #8
 8000558:	d054      	beq.n	8000604 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800055a:	6923      	ldr	r3, [r4, #16]
 800055c:	2b00      	cmp	r3, #0
 800055e:	f000 808a 	beq.w	8000676 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000562:	4b8c      	ldr	r3, [pc, #560]	; (8000794 <HAL_RCC_OscConfig+0x2c0>)
 8000564:	2201      	movs	r2, #1
 8000566:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000568:	f7ff fe34 	bl	80001d4 <HAL_GetTick>
 800056c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800056e:	4b88      	ldr	r3, [pc, #544]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f013 0f02 	tst.w	r3, #2
 8000576:	d175      	bne.n	8000664 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000578:	f7ff fe2c 	bl	80001d4 <HAL_GetTick>
 800057c:	1b40      	subs	r0, r0, r5
 800057e:	2802      	cmp	r0, #2
 8000580:	d9f5      	bls.n	800056e <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000582:	2003      	movs	r0, #3
 8000584:	e18b      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000586:	4a82      	ldr	r2, [pc, #520]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000588:	6813      	ldr	r3, [r2, #0]
 800058a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800058e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	b343      	cbz	r3, 80005e6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000594:	f7ff fe1e 	bl	80001d4 <HAL_GetTick>
 8000598:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800059a:	4b7d      	ldr	r3, [pc, #500]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005a2:	d1cb      	bne.n	800053c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a4:	f7ff fe16 	bl	80001d4 <HAL_GetTick>
 80005a8:	1b40      	subs	r0, r0, r5
 80005aa:	2864      	cmp	r0, #100	; 0x64
 80005ac:	d9f5      	bls.n	800059a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80005ae:	2003      	movs	r0, #3
 80005b0:	e175      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005b6:	d009      	beq.n	80005cc <HAL_RCC_OscConfig+0xf8>
 80005b8:	4b75      	ldr	r3, [pc, #468]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	e7e1      	b.n	8000590 <HAL_RCC_OscConfig+0xbc>
 80005cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005d0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	e7d4      	b.n	8000590 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80005e6:	f7ff fdf5 	bl	80001d4 <HAL_GetTick>
 80005ea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ec:	4b68      	ldr	r3, [pc, #416]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005f4:	d0a2      	beq.n	800053c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005f6:	f7ff fded 	bl	80001d4 <HAL_GetTick>
 80005fa:	1b40      	subs	r0, r0, r5
 80005fc:	2864      	cmp	r0, #100	; 0x64
 80005fe:	d9f5      	bls.n	80005ec <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000600:	2003      	movs	r0, #3
 8000602:	e14c      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000604:	4b62      	ldr	r3, [pc, #392]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800060c:	d1a5      	bne.n	800055a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f013 0f02 	tst.w	r3, #2
 8000616:	d004      	beq.n	8000622 <HAL_RCC_OscConfig+0x14e>
 8000618:	6923      	ldr	r3, [r4, #16]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d001      	beq.n	8000622 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800061e:	2001      	movs	r0, #1
 8000620:	e13d      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000622:	4a5b      	ldr	r2, [pc, #364]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000624:	6813      	ldr	r3, [r2, #0]
 8000626:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800062a:	6961      	ldr	r1, [r4, #20]
 800062c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000630:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000632:	6823      	ldr	r3, [r4, #0]
 8000634:	f013 0f08 	tst.w	r3, #8
 8000638:	d032      	beq.n	80006a0 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800063a:	69a3      	ldr	r3, [r4, #24]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d05b      	beq.n	80006f8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8000640:	4b55      	ldr	r3, [pc, #340]	; (8000798 <HAL_RCC_OscConfig+0x2c4>)
 8000642:	2201      	movs	r2, #1
 8000644:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000646:	f7ff fdc5 	bl	80001d4 <HAL_GetTick>
 800064a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800064c:	4b50      	ldr	r3, [pc, #320]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800064e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000650:	f013 0f02 	tst.w	r3, #2
 8000654:	d121      	bne.n	800069a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000656:	f7ff fdbd 	bl	80001d4 <HAL_GetTick>
 800065a:	1b40      	subs	r0, r0, r5
 800065c:	2802      	cmp	r0, #2
 800065e:	d9f5      	bls.n	800064c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000660:	2003      	movs	r0, #3
 8000662:	e11c      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000664:	4a4a      	ldr	r2, [pc, #296]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000666:	6813      	ldr	r3, [r2, #0]
 8000668:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800066c:	6961      	ldr	r1, [r4, #20]
 800066e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	e7dd      	b.n	8000632 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000676:	4b47      	ldr	r3, [pc, #284]	; (8000794 <HAL_RCC_OscConfig+0x2c0>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800067c:	f7ff fdaa 	bl	80001d4 <HAL_GetTick>
 8000680:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f013 0f02 	tst.w	r3, #2
 800068a:	d0d2      	beq.n	8000632 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068c:	f7ff fda2 	bl	80001d4 <HAL_GetTick>
 8000690:	1b40      	subs	r0, r0, r5
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f5      	bls.n	8000682 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000696:	2003      	movs	r0, #3
 8000698:	e101      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f7ff ff04 	bl	80004a8 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006a0:	6823      	ldr	r3, [r4, #0]
 80006a2:	f013 0f04 	tst.w	r3, #4
 80006a6:	f000 8097 	beq.w	80007d8 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80006b2:	d133      	bne.n	800071c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 80006b6:	69da      	ldr	r2, [r3, #28]
 80006b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006bc:	61da      	str	r2, [r3, #28]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80006c8:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <HAL_RCC_OscConfig+0x2c8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80006d2:	d025      	beq.n	8000720 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d4:	68e3      	ldr	r3, [r4, #12]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d036      	beq.n	8000748 <HAL_RCC_OscConfig+0x274>
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d14c      	bne.n	8000778 <HAL_RCC_OscConfig+0x2a4>
 80006de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006e2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006e6:	6a1a      	ldr	r2, [r3, #32]
 80006e8:	f022 0201 	bic.w	r2, r2, #1
 80006ec:	621a      	str	r2, [r3, #32]
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	f022 0204 	bic.w	r2, r2, #4
 80006f4:	621a      	str	r2, [r3, #32]
 80006f6:	e02c      	b.n	8000752 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <HAL_RCC_OscConfig+0x2c4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006fe:	f7ff fd69 	bl	80001d4 <HAL_GetTick>
 8000702:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 8000706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000708:	f013 0f02 	tst.w	r3, #2
 800070c:	d0c8      	beq.n	80006a0 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800070e:	f7ff fd61 	bl	80001d4 <HAL_GetTick>
 8000712:	1b40      	subs	r0, r0, r5
 8000714:	2802      	cmp	r0, #2
 8000716:	d9f5      	bls.n	8000704 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8000718:	2003      	movs	r0, #3
 800071a:	e0c0      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 800071c:	2500      	movs	r5, #0
 800071e:	e7d4      	b.n	80006ca <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000720:	4a1e      	ldr	r2, [pc, #120]	; (800079c <HAL_RCC_OscConfig+0x2c8>)
 8000722:	6813      	ldr	r3, [r2, #0]
 8000724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000728:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800072a:	f7ff fd53 	bl	80001d4 <HAL_GetTick>
 800072e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <HAL_RCC_OscConfig+0x2c8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000738:	d1cc      	bne.n	80006d4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800073a:	f7ff fd4b 	bl	80001d4 <HAL_GetTick>
 800073e:	1b80      	subs	r0, r0, r6
 8000740:	2864      	cmp	r0, #100	; 0x64
 8000742:	d9f5      	bls.n	8000730 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8000744:	2003      	movs	r0, #3
 8000746:	e0aa      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800074a:	6a13      	ldr	r3, [r2, #32]
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000752:	68e3      	ldr	r3, [r4, #12]
 8000754:	b373      	cbz	r3, 80007b4 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8000756:	f7ff fd3d 	bl	80001d4 <HAL_GetTick>
 800075a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800075e:	6a1b      	ldr	r3, [r3, #32]
 8000760:	f013 0f02 	tst.w	r3, #2
 8000764:	d137      	bne.n	80007d6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000766:	f7ff fd35 	bl	80001d4 <HAL_GetTick>
 800076a:	1b80      	subs	r0, r0, r6
 800076c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000770:	4298      	cmp	r0, r3
 8000772:	d9f3      	bls.n	800075c <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8000774:	2003      	movs	r0, #3
 8000776:	e092      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000778:	2b05      	cmp	r3, #5
 800077a:	d011      	beq.n	80007a0 <HAL_RCC_OscConfig+0x2cc>
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <HAL_RCC_OscConfig+0x2bc>)
 800077e:	6a1a      	ldr	r2, [r3, #32]
 8000780:	f022 0201 	bic.w	r2, r2, #1
 8000784:	621a      	str	r2, [r3, #32]
 8000786:	6a1a      	ldr	r2, [r3, #32]
 8000788:	f022 0204 	bic.w	r2, r2, #4
 800078c:	621a      	str	r2, [r3, #32]
 800078e:	e7e0      	b.n	8000752 <HAL_RCC_OscConfig+0x27e>
 8000790:	40021000 	.word	0x40021000
 8000794:	42420000 	.word	0x42420000
 8000798:	42420480 	.word	0x42420480
 800079c:	40007000 	.word	0x40007000
 80007a0:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 80007a2:	6a1a      	ldr	r2, [r3, #32]
 80007a4:	f042 0204 	orr.w	r2, r2, #4
 80007a8:	621a      	str	r2, [r3, #32]
 80007aa:	6a1a      	ldr	r2, [r3, #32]
 80007ac:	f042 0201 	orr.w	r2, r2, #1
 80007b0:	621a      	str	r2, [r3, #32]
 80007b2:	e7ce      	b.n	8000752 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 80007b4:	f7ff fd0e 	bl	80001d4 <HAL_GetTick>
 80007b8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007ba:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	f013 0f02 	tst.w	r3, #2
 80007c2:	d008      	beq.n	80007d6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c4:	f7ff fd06 	bl	80001d4 <HAL_GetTick>
 80007c8:	1b80      	subs	r0, r0, r6
 80007ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80007ce:	4298      	cmp	r0, r3
 80007d0:	d9f3      	bls.n	80007ba <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80007d2:	2003      	movs	r0, #3
 80007d4:	e063      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80007d6:	b9e5      	cbnz	r5, 8000812 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007d8:	69e3      	ldr	r3, [r4, #28]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d05e      	beq.n	800089c <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 80007e0:	6852      	ldr	r2, [r2, #4]
 80007e2:	f002 020c 	and.w	r2, r2, #12
 80007e6:	2a08      	cmp	r2, #8
 80007e8:	d05b      	beq.n	80008a2 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d017      	beq.n	800081e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80007ee:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <HAL_RCC_OscConfig+0x3d8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007f4:	f7ff fcee 	bl	80001d4 <HAL_GetTick>
 80007f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000802:	d047      	beq.n	8000894 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000804:	f7ff fce6 	bl	80001d4 <HAL_GetTick>
 8000808:	1b00      	subs	r0, r0, r4
 800080a:	2802      	cmp	r0, #2
 800080c:	d9f5      	bls.n	80007fa <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800080e:	2003      	movs	r0, #3
 8000810:	e045      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000812:	4a25      	ldr	r2, [pc, #148]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 8000814:	69d3      	ldr	r3, [r2, #28]
 8000816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800081a:	61d3      	str	r3, [r2, #28]
 800081c:	e7dc      	b.n	80007d8 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 800081e:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_RCC_OscConfig+0x3d8>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000824:	f7ff fcd6 	bl	80001d4 <HAL_GetTick>
 8000828:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800082a:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000832:	d006      	beq.n	8000842 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f7ff fcce 	bl	80001d4 <HAL_GetTick>
 8000838:	1b40      	subs	r0, r0, r5
 800083a:	2802      	cmp	r0, #2
 800083c:	d9f5      	bls.n	800082a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800083e:	2003      	movs	r0, #3
 8000840:	e02d      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000842:	6a23      	ldr	r3, [r4, #32]
 8000844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000848:	d01a      	beq.n	8000880 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800084a:	4917      	ldr	r1, [pc, #92]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 800084c:	684b      	ldr	r3, [r1, #4]
 800084e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000852:	6a22      	ldr	r2, [r4, #32]
 8000854:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000856:	4302      	orrs	r2, r0
 8000858:	4313      	orrs	r3, r2
 800085a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <HAL_RCC_OscConfig+0x3d8>)
 800085e:	2201      	movs	r2, #1
 8000860:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000862:	f7ff fcb7 	bl	80001d4 <HAL_GetTick>
 8000866:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000870:	d10e      	bne.n	8000890 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000872:	f7ff fcaf 	bl	80001d4 <HAL_GetTick>
 8000876:	1b00      	subs	r0, r0, r4
 8000878:	2802      	cmp	r0, #2
 800087a:	d9f5      	bls.n	8000868 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 800087c:	2003      	movs	r0, #3
 800087e:	e00e      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000880:	4a09      	ldr	r2, [pc, #36]	; (80008a8 <HAL_RCC_OscConfig+0x3d4>)
 8000882:	6853      	ldr	r3, [r2, #4]
 8000884:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000888:	68a1      	ldr	r1, [r4, #8]
 800088a:	430b      	orrs	r3, r1
 800088c:	6053      	str	r3, [r2, #4]
 800088e:	e7dc      	b.n	800084a <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000890:	2000      	movs	r0, #0
 8000892:	e004      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
 8000894:	2000      	movs	r0, #0
 8000896:	e002      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000898:	2001      	movs	r0, #1
 800089a:	e000      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800089c:	2000      	movs	r0, #0
}
 800089e:	b002      	add	sp, #8
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
 80008a4:	e7fb      	b.n	800089e <HAL_RCC_OscConfig+0x3ca>
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	42420060 	.word	0x42420060

080008b0 <HAL_RCC_GetSysClockFreq>:
{
 80008b0:	b410      	push	{r4}
 80008b2:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008b4:	4c16      	ldr	r4, [pc, #88]	; (8000910 <HAL_RCC_GetSysClockFreq+0x60>)
 80008b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ba:	f10d 0c18 	add.w	ip, sp, #24
 80008be:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008c2:	8a23      	ldrh	r3, [r4, #16]
 80008c4:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_RCC_GetSysClockFreq+0x64>)
 80008ca:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008cc:	f003 020c 	and.w	r2, r3, #12
 80008d0:	2a08      	cmp	r2, #8
 80008d2:	d11a      	bne.n	800090a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008d4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008d8:	4462      	add	r2, ip
 80008da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008e2:	d105      	bne.n	80008f0 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <HAL_RCC_GetSysClockFreq+0x68>)
 80008e6:	fb00 f002 	mul.w	r0, r0, r2
}
 80008ea:	b007      	add	sp, #28
 80008ec:	bc10      	pop	{r4}
 80008ee:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_RCC_GetSysClockFreq+0x64>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80008f8:	4463      	add	r3, ip
 80008fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008fe:	4807      	ldr	r0, [pc, #28]	; (800091c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000900:	fb00 f002 	mul.w	r0, r0, r2
 8000904:	fbb0 f0f3 	udiv	r0, r0, r3
 8000908:	e7ef      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800090c:	e7ed      	b.n	80008ea <HAL_RCC_GetSysClockFreq+0x3a>
 800090e:	bf00      	nop
 8000910:	08000d34 	.word	0x08000d34
 8000914:	40021000 	.word	0x40021000
 8000918:	003d0900 	.word	0x003d0900
 800091c:	007a1200 	.word	0x007a1200

08000920 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000920:	4b62      	ldr	r3, [pc, #392]	; (8000aac <HAL_RCC_ClockConfig+0x18c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	428b      	cmp	r3, r1
 800092a:	d20c      	bcs.n	8000946 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800092c:	4a5f      	ldr	r2, [pc, #380]	; (8000aac <HAL_RCC_ClockConfig+0x18c>)
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	f023 0307 	bic.w	r3, r3, #7
 8000934:	430b      	orrs	r3, r1
 8000936:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000938:	6813      	ldr	r3, [r2, #0]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	428b      	cmp	r3, r1
 8000940:	d001      	beq.n	8000946 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000942:	2001      	movs	r0, #1
}
 8000944:	4770      	bx	lr
{
 8000946:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000948:	6803      	ldr	r3, [r0, #0]
 800094a:	f013 0f02 	tst.w	r3, #2
 800094e:	d017      	beq.n	8000980 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000950:	f013 0f04 	tst.w	r3, #4
 8000954:	d004      	beq.n	8000960 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000956:	4a56      	ldr	r2, [pc, #344]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000958:	6853      	ldr	r3, [r2, #4]
 800095a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800095e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000960:	6803      	ldr	r3, [r0, #0]
 8000962:	f013 0f08 	tst.w	r3, #8
 8000966:	d004      	beq.n	8000972 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000968:	4a51      	ldr	r2, [pc, #324]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 800096a:	6853      	ldr	r3, [r2, #4]
 800096c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000970:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000972:	4a4f      	ldr	r2, [pc, #316]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000974:	6853      	ldr	r3, [r2, #4]
 8000976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800097a:	6884      	ldr	r4, [r0, #8]
 800097c:	4323      	orrs	r3, r4
 800097e:	6053      	str	r3, [r2, #4]
 8000980:	460d      	mov	r5, r1
 8000982:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000984:	6803      	ldr	r3, [r0, #0]
 8000986:	f013 0f01 	tst.w	r3, #1
 800098a:	d052      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800098c:	6843      	ldr	r3, [r0, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d023      	beq.n	80009da <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000992:	2b02      	cmp	r3, #2
 8000994:	d028      	beq.n	80009e8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	4a46      	ldr	r2, [pc, #280]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	f012 0f02 	tst.w	r2, #2
 800099e:	f000 8082 	beq.w	8000aa6 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a2:	4943      	ldr	r1, [pc, #268]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 80009a4:	684a      	ldr	r2, [r1, #4]
 80009a6:	f022 0203 	bic.w	r2, r2, #3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80009ae:	f7ff fc11 	bl	80001d4 <HAL_GetTick>
 80009b2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b4:	6863      	ldr	r3, [r4, #4]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d01d      	beq.n	80009f6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d02a      	beq.n	8000a14 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f013 0f0c 	tst.w	r3, #12
 80009c6:	d034      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c8:	f7ff fc04 	bl	80001d4 <HAL_GetTick>
 80009cc:	1b80      	subs	r0, r0, r6
 80009ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d9f3      	bls.n	80009be <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80009d6:	2003      	movs	r0, #3
 80009d8:	e064      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009da:	4a35      	ldr	r2, [pc, #212]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80009e2:	d1de      	bne.n	80009a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009e4:	2001      	movs	r0, #1
 80009e6:	e05d      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009e8:	4a31      	ldr	r2, [pc, #196]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 80009ea:	6812      	ldr	r2, [r2, #0]
 80009ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80009f0:	d1d7      	bne.n	80009a2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009f2:	2001      	movs	r0, #1
 80009f4:	e056      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009f6:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 030c 	and.w	r3, r3, #12
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d017      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a02:	f7ff fbe7 	bl	80001d4 <HAL_GetTick>
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a0c:	4298      	cmp	r0, r3
 8000a0e:	d9f2      	bls.n	80009f6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000a10:	2003      	movs	r0, #3
 8000a12:	e047      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a14:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 030c 	and.w	r3, r3, #12
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d008      	beq.n	8000a32 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a20:	f7ff fbd8 	bl	80001d4 <HAL_GetTick>
 8000a24:	1b80      	subs	r0, r0, r6
 8000a26:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a2a:	4298      	cmp	r0, r3
 8000a2c:	d9f2      	bls.n	8000a14 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000a2e:	2003      	movs	r0, #3
 8000a30:	e038      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <HAL_RCC_ClockConfig+0x18c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	42ab      	cmp	r3, r5
 8000a3c:	d90c      	bls.n	8000a58 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a3e:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <HAL_RCC_ClockConfig+0x18c>)
 8000a40:	6813      	ldr	r3, [r2, #0]
 8000a42:	f023 0307 	bic.w	r3, r3, #7
 8000a46:	432b      	orrs	r3, r5
 8000a48:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f003 0307 	and.w	r3, r3, #7
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d001      	beq.n	8000a58 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
 8000a56:	e025      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	f013 0f04 	tst.w	r3, #4
 8000a5e:	d006      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a60:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000a62:	6853      	ldr	r3, [r2, #4]
 8000a64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a68:	68e1      	ldr	r1, [r4, #12]
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	f013 0f08 	tst.w	r3, #8
 8000a74:	d007      	beq.n	8000a86 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000a78:	6853      	ldr	r3, [r2, #4]
 8000a7a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a7e:	6921      	ldr	r1, [r4, #16]
 8000a80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a84:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a86:	f7ff ff13 	bl	80008b0 <HAL_RCC_GetSysClockFreq>
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_RCC_ClockConfig+0x190>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_RCC_ClockConfig+0x194>)
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	40d8      	lsrs	r0, r3
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <HAL_RCC_ClockConfig+0x198>)
 8000a9a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fb55 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000aa2:	2000      	movs	r0, #0
}
 8000aa4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	e7fc      	b.n	8000aa4 <HAL_RCC_ClockConfig+0x184>
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	08000d48 	.word	0x08000d48
 8000ab8:	20000008 	.word	0x20000008

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	2400      	movs	r4, #0
 8000ac4:	9404      	str	r4, [sp, #16]
 8000ac6:	9405      	str	r4, [sp, #20]
 8000ac8:	9406      	str	r4, [sp, #24]
 8000aca:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <MX_GPIO_Init+0x94>)
 8000ace:	699a      	ldr	r2, [r3, #24]
 8000ad0:	f042 0210 	orr.w	r2, r2, #16
 8000ad4:	619a      	str	r2, [r3, #24]
 8000ad6:	699a      	ldr	r2, [r3, #24]
 8000ad8:	f002 0210 	and.w	r2, r2, #16
 8000adc:	9201      	str	r2, [sp, #4]
 8000ade:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	f042 0220 	orr.w	r2, r2, #32
 8000ae6:	619a      	str	r2, [r3, #24]
 8000ae8:	699a      	ldr	r2, [r3, #24]
 8000aea:	f002 0220 	and.w	r2, r2, #32
 8000aee:	9202      	str	r2, [sp, #8]
 8000af0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	699a      	ldr	r2, [r3, #24]
 8000af4:	f042 0204 	orr.w	r2, r2, #4
 8000af8:	619a      	str	r2, [r3, #24]
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f003 0304 	and.w	r3, r3, #4
 8000b00:	9303      	str	r3, [sp, #12]
 8000b02:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b04:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8000b58 <MX_GPIO_Init+0x9c>
 8000b08:	4622      	mov	r2, r4
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	4640      	mov	r0, r8
 8000b10:	f7ff fcc0 	bl	8000494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000b14:	4d0f      	ldr	r5, [pc, #60]	; (8000b54 <MX_GPIO_Init+0x98>)
 8000b16:	4622      	mov	r2, r4
 8000b18:	211e      	movs	r1, #30
 8000b1a:	4628      	mov	r0, r5
 8000b1c:	f7ff fcba 	bl	8000494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b24:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2701      	movs	r7, #1
 8000b28:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2602      	movs	r6, #2
 8000b2e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	a904      	add	r1, sp, #16
 8000b32:	4640      	mov	r0, r8
 8000b34:	f7ff fbc4 	bl	80002c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000b38:	231e      	movs	r3, #30
 8000b3a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	a904      	add	r1, sp, #16
 8000b44:	4628      	mov	r0, r5
 8000b46:	f7ff fbbb 	bl	80002c0 <HAL_GPIO_Init>

}
 8000b4a:	b008      	add	sp, #32
 8000b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40011000 	.word	0x40011000

08000b5c <SystemClock_Config>:
{
 8000b5c:	b530      	push	{r4, r5, lr}
 8000b5e:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b60:	2400      	movs	r4, #0
 8000b62:	9408      	str	r4, [sp, #32]
 8000b64:	9409      	str	r4, [sp, #36]	; 0x24
 8000b66:	940b      	str	r4, [sp, #44]	; 0x2c
 8000b68:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b6a:	9401      	str	r4, [sp, #4]
 8000b6c:	9402      	str	r4, [sp, #8]
 8000b6e:	9403      	str	r4, [sp, #12]
 8000b70:	9404      	str	r4, [sp, #16]
 8000b72:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b74:	2201      	movs	r2, #1
 8000b76:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b7e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2502      	movs	r5, #2
 8000b82:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b8a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	a806      	add	r0, sp, #24
 8000b8e:	f7ff fca1 	bl	80004d4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b92:	230f      	movs	r3, #15
 8000b94:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b96:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba0:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	a801      	add	r0, sp, #4
 8000ba6:	f7ff febb 	bl	8000920 <HAL_RCC_ClockConfig>
}
 8000baa:	b011      	add	sp, #68	; 0x44
 8000bac:	bd30      	pop	{r4, r5, pc}
	...

08000bb0 <main>:
{
 8000bb0:	b508      	push	{r3, lr}
  HAL_Init();
 8000bb2:	f7ff faf1 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8000bb6:	f7ff ffd1 	bl	8000b5c <SystemClock_Config>
  MX_GPIO_Init();
 8000bba:	f7ff ff7f 	bl	8000abc <MX_GPIO_Init>
	  HAL_Delay(200);
 8000bbe:	20c8      	movs	r0, #200	; 0xc8
 8000bc0:	f7ff fb0e 	bl	80001e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000bc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <main+0x28>)
 8000bca:	f7ff fc69 	bl	80004a0 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <main+0x2c>)
 8000bd2:	f7ff fc65 	bl	80004a0 <HAL_GPIO_TogglePin>
 8000bd6:	e7f2      	b.n	8000bbe <main+0xe>
 8000bd8:	40011000 	.word	0x40011000
 8000bdc:	40010800 	.word	0x40010800

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_MspInit+0x3c>)
 8000be4:	699a      	ldr	r2, [r3, #24]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	619a      	str	r2, [r3, #24]
 8000bec:	699a      	ldr	r2, [r3, #24]
 8000bee:	f002 0201 	and.w	r2, r2, #1
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	69da      	ldr	r2, [r3, #28]
 8000bf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bfc:	61da      	str	r2, [r3, #28]
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c08:	4a05      	ldr	r2, [pc, #20]	; (8000c20 <HAL_MspInit+0x40>)
 8000c0a:	6853      	ldr	r3, [r2, #4]
 8000c0c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c14:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	b002      	add	sp, #8
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c24:	4770      	bx	lr

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler>

08000c2e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c30:	4770      	bx	lr

08000c32 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	4770      	bx	lr

08000c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c36:	f7ff fac1 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3a:	bd08      	pop	{r3, pc}

08000c3c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SystemInit+0x40>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f042 0201 	orr.w	r2, r2, #1
 8000c44:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000c46:	6859      	ldr	r1, [r3, #4]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <SystemInit+0x44>)
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000c54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000c58:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000c60:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000c68:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000c6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000c6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SystemInit+0x48>)
 8000c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c76:	609a      	str	r2, [r3, #8]
#endif 
}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	f8ff0000 	.word	0xf8ff0000
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c88:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c8a:	e003      	b.n	8000c94 <LoopCopyDataInit>

08000c8c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c8e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c90:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c92:	3104      	adds	r1, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c98:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c9c:	d3f6      	bcc.n	8000c8c <CopyDataInit>
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ca0:	e002      	b.n	8000ca8 <LoopFillZerobss>

08000ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ca4:	f842 3b04 	str.w	r3, [r2], #4

08000ca8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000caa:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cac:	d3f9      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cae:	f7ff ffc5 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f000 f80f 	bl	8000cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb6:	f7ff ff7b 	bl	8000bb0 <main>
  bx lr
 8000cba:	4770      	bx	lr
  ldr r3, =_sidata
 8000cbc:	08000d60 	.word	0x08000d60
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000cc8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000ccc:	2000002c 	.word	0x2000002c

08000cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_2_IRQHandler>
	...

08000cd4 <__libc_init_array>:
 8000cd4:	b570      	push	{r4, r5, r6, lr}
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	4e0c      	ldr	r6, [pc, #48]	; (8000d0c <__libc_init_array+0x38>)
 8000cda:	4c0d      	ldr	r4, [pc, #52]	; (8000d10 <__libc_init_array+0x3c>)
 8000cdc:	1ba4      	subs	r4, r4, r6
 8000cde:	10a4      	asrs	r4, r4, #2
 8000ce0:	42a5      	cmp	r5, r4
 8000ce2:	d109      	bne.n	8000cf8 <__libc_init_array+0x24>
 8000ce4:	f000 f81a 	bl	8000d1c <_init>
 8000ce8:	2500      	movs	r5, #0
 8000cea:	4e0a      	ldr	r6, [pc, #40]	; (8000d14 <__libc_init_array+0x40>)
 8000cec:	4c0a      	ldr	r4, [pc, #40]	; (8000d18 <__libc_init_array+0x44>)
 8000cee:	1ba4      	subs	r4, r4, r6
 8000cf0:	10a4      	asrs	r4, r4, #2
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d105      	bne.n	8000d02 <__libc_init_array+0x2e>
 8000cf6:	bd70      	pop	{r4, r5, r6, pc}
 8000cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cfc:	4798      	blx	r3
 8000cfe:	3501      	adds	r5, #1
 8000d00:	e7ee      	b.n	8000ce0 <__libc_init_array+0xc>
 8000d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d06:	4798      	blx	r3
 8000d08:	3501      	adds	r5, #1
 8000d0a:	e7f2      	b.n	8000cf2 <__libc_init_array+0x1e>
 8000d0c:	08000d58 	.word	0x08000d58
 8000d10:	08000d58 	.word	0x08000d58
 8000d14:	08000d58 	.word	0x08000d58
 8000d18:	08000d5c 	.word	0x08000d5c

08000d1c <_init>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr

08000d28 <_fini>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr
