
Mirage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001544  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001650  08001650  00011650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001674  08001674  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001674  08001674  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001674  08001674  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001674  08001674  00011674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001678  08001678  00011678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800167c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08001688  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001688  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db01  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a26  00000000  00000000  0002db36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000057ff  00000000  00000000  0002f55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000830  00000000  00000000  00034d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000808  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00014ba5  00000000  00000000  00035d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00006ddb  00000000  00000000  0004a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006f867  00000000  00000000  00051718  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c0f7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014f8  00000000  00000000  000c0ffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001638 	.word	0x08001638

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001638 	.word	0x08001638

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f843 	bl	8000204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f81b 	bl	80001e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 f936 	bl	8001420 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000028 	.word	0x20000028
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000028 	.word	0x20000028

080001e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e8:	041b      	lsls	r3, r3, #16
 80001ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ec:	0200      	lsls	r0, r0, #8
 80001ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001fc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001fe:	4770      	bx	lr
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000204:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_NVIC_SetPriority+0x60>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020e:	f1c3 0407 	rsb	r4, r3, #7
 8000212:	2c04      	cmp	r4, #4
 8000214:	bf28      	it	cs
 8000216:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	1d1d      	adds	r5, r3, #4
 800021a:	2d06      	cmp	r5, #6
 800021c:	d918      	bls.n	8000250 <HAL_NVIC_SetPriority+0x4c>
 800021e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	f04f 35ff 	mov.w	r5, #4294967295
 8000224:	fa05 f404 	lsl.w	r4, r5, r4
 8000228:	ea21 0104 	bic.w	r1, r1, r4
 800022c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022e:	fa05 f303 	lsl.w	r3, r5, r3
 8000232:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
 800023a:	db0b      	blt.n	8000254 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	0109      	lsls	r1, r1, #4
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800024c:	bc30      	pop	{r4, r5}
 800024e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	2300      	movs	r3, #0
 8000252:	e7e5      	b.n	8000220 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	f000 000f 	and.w	r0, r0, #15
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	b2c9      	uxtb	r1, r1
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <HAL_NVIC_SetPriority+0x64>)
 800025e:	5419      	strb	r1, [r3, r0]
 8000260:	e7f4      	b.n	800024c <HAL_NVIC_SetPriority+0x48>
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000ed14 	.word	0xe000ed14

0800026c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800026c:	f000 021f 	and.w	r2, r0, #31
 8000270:	0940      	lsrs	r0, r0, #5
 8000272:	2301      	movs	r3, #1
 8000274:	4093      	lsls	r3, r2
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_NVIC_EnableIRQ+0x14>)
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
 8000292:	21f0      	movs	r1, #240	; 0xf0
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
 800029a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b4:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b6:	4635      	mov	r5, r6
 80002b8:	e0a1      	b.n	80003fe <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ba:	2c00      	cmp	r4, #0
 80002bc:	d059      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 80002be:	2c01      	cmp	r4, #1
 80002c0:	d100      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002c2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002c4:	2bff      	cmp	r3, #255	; 0xff
 80002c6:	d868      	bhi.n	800039a <HAL_GPIO_Init+0xea>
 80002c8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002ca:	2bff      	cmp	r3, #255	; 0xff
 80002cc:	d868      	bhi.n	80003a0 <HAL_GPIO_Init+0xf0>
 80002ce:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d0:	f8dc 2000 	ldr.w	r2, [ip]
 80002d4:	270f      	movs	r7, #15
 80002d6:	40a7      	lsls	r7, r4
 80002d8:	ea22 0207 	bic.w	r2, r2, r7
 80002dc:	fa06 f404 	lsl.w	r4, r6, r4
 80002e0:	4322      	orrs	r2, r4
 80002e2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002e6:	684a      	ldr	r2, [r1, #4]
 80002e8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80002ec:	f000 8086 	beq.w	80003fc <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002f0:	4a5e      	ldr	r2, [pc, #376]	; (800046c <HAL_GPIO_Init+0x1bc>)
 80002f2:	6994      	ldr	r4, [r2, #24]
 80002f4:	f044 0401 	orr.w	r4, r4, #1
 80002f8:	6194      	str	r4, [r2, #24]
 80002fa:	6992      	ldr	r2, [r2, #24]
 80002fc:	f002 0201 	and.w	r2, r2, #1
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000304:	08ac      	lsrs	r4, r5, #2
 8000306:	1ca7      	adds	r7, r4, #2
 8000308:	4a59      	ldr	r2, [pc, #356]	; (8000470 <HAL_GPIO_Init+0x1c0>)
 800030a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800030e:	f005 0703 	and.w	r7, r5, #3
 8000312:	00bf      	lsls	r7, r7, #2
 8000314:	f04f 0c0f 	mov.w	ip, #15
 8000318:	fa0c fc07 	lsl.w	ip, ip, r7
 800031c:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000320:	4a54      	ldr	r2, [pc, #336]	; (8000474 <HAL_GPIO_Init+0x1c4>)
 8000322:	4290      	cmp	r0, r2
 8000324:	d042      	beq.n	80003ac <HAL_GPIO_Init+0xfc>
 8000326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800032a:	4290      	cmp	r0, r2
 800032c:	d07f      	beq.n	800042e <HAL_GPIO_Init+0x17e>
 800032e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000332:	4290      	cmp	r0, r2
 8000334:	d07d      	beq.n	8000432 <HAL_GPIO_Init+0x182>
 8000336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800033a:	4290      	cmp	r0, r2
 800033c:	d034      	beq.n	80003a8 <HAL_GPIO_Init+0xf8>
 800033e:	2204      	movs	r2, #4
 8000340:	e035      	b.n	80003ae <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8000342:	4f4d      	ldr	r7, [pc, #308]	; (8000478 <HAL_GPIO_Init+0x1c8>)
 8000344:	42bc      	cmp	r4, r7
 8000346:	d014      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000348:	d90b      	bls.n	8000362 <HAL_GPIO_Init+0xb2>
 800034a:	4f4c      	ldr	r7, [pc, #304]	; (800047c <HAL_GPIO_Init+0x1cc>)
 800034c:	42bc      	cmp	r4, r7
 800034e:	d010      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000350:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000354:	42bc      	cmp	r4, r7
 8000356:	d00c      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000358:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800035c:	42bc      	cmp	r4, r7
 800035e:	d1b1      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
 8000360:	e007      	b.n	8000372 <HAL_GPIO_Init+0xc2>
 8000362:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000366:	42bc      	cmp	r4, r7
 8000368:	d003      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 800036a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800036e:	42bc      	cmp	r4, r7
 8000370:	d1a8      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000372:	688c      	ldr	r4, [r1, #8]
 8000374:	b17c      	cbz	r4, 8000396 <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000376:	2c01      	cmp	r4, #1
 8000378:	d008      	beq.n	800038c <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800037a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800037c:	2608      	movs	r6, #8
 800037e:	e7a1      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000380:	68ce      	ldr	r6, [r1, #12]
 8000382:	3608      	adds	r6, #8
          break;
 8000384:	e79e      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000386:	68ce      	ldr	r6, [r1, #12]
 8000388:	360c      	adds	r6, #12
          break;
 800038a:	e79b      	b.n	80002c4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800038c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800038e:	2608      	movs	r6, #8
 8000390:	e798      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000392:	2600      	movs	r6, #0
 8000394:	e796      	b.n	80002c4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000396:	2604      	movs	r6, #4
 8000398:	e794      	b.n	80002c4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800039a:	f100 0c04 	add.w	ip, r0, #4
 800039e:	e794      	b.n	80002ca <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003a0:	f1a5 0408 	sub.w	r4, r5, #8
 80003a4:	00a4      	lsls	r4, r4, #2
 80003a6:	e793      	b.n	80002d0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a8:	2203      	movs	r2, #3
 80003aa:	e000      	b.n	80003ae <HAL_GPIO_Init+0xfe>
 80003ac:	2200      	movs	r2, #0
 80003ae:	40ba      	lsls	r2, r7
 80003b0:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 80003b4:	3402      	adds	r4, #2
 80003b6:	4f2e      	ldr	r7, [pc, #184]	; (8000470 <HAL_GPIO_Init+0x1c0>)
 80003b8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	684a      	ldr	r2, [r1, #4]
 80003be:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80003c2:	d038      	beq.n	8000436 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c4:	4c2e      	ldr	r4, [pc, #184]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003c6:	6822      	ldr	r2, [r4, #0]
 80003c8:	431a      	orrs	r2, r3
 80003ca:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003cc:	684a      	ldr	r2, [r1, #4]
 80003ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80003d2:	d036      	beq.n	8000442 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	4c2a      	ldr	r4, [pc, #168]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003d6:	6862      	ldr	r2, [r4, #4]
 80003d8:	431a      	orrs	r2, r3
 80003da:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003dc:	684a      	ldr	r2, [r1, #4]
 80003de:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80003e2:	d034      	beq.n	800044e <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e4:	4c26      	ldr	r4, [pc, #152]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003e6:	68a2      	ldr	r2, [r4, #8]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ec:	684a      	ldr	r2, [r1, #4]
 80003ee:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80003f2:	d032      	beq.n	800045a <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	4c22      	ldr	r4, [pc, #136]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003f6:	68e2      	ldr	r2, [r4, #12]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003fc:	3501      	adds	r5, #1
 80003fe:	2d0f      	cmp	r5, #15
 8000400:	d831      	bhi.n	8000466 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 8000402:	2201      	movs	r2, #1
 8000404:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000406:	680b      	ldr	r3, [r1, #0]
 8000408:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800040a:	429a      	cmp	r2, r3
 800040c:	d1f6      	bne.n	80003fc <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 800040e:	684c      	ldr	r4, [r1, #4]
 8000410:	2c12      	cmp	r4, #18
 8000412:	d0b8      	beq.n	8000386 <HAL_GPIO_Init+0xd6>
 8000414:	d895      	bhi.n	8000342 <HAL_GPIO_Init+0x92>
 8000416:	2c02      	cmp	r4, #2
 8000418:	d0b2      	beq.n	8000380 <HAL_GPIO_Init+0xd0>
 800041a:	f67f af4e 	bls.w	80002ba <HAL_GPIO_Init+0xa>
 800041e:	2c03      	cmp	r4, #3
 8000420:	d0b7      	beq.n	8000392 <HAL_GPIO_Init+0xe2>
 8000422:	2c11      	cmp	r4, #17
 8000424:	f47f af4e 	bne.w	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000428:	68ce      	ldr	r6, [r1, #12]
 800042a:	3604      	adds	r6, #4
          break;
 800042c:	e74a      	b.n	80002c4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	2201      	movs	r2, #1
 8000430:	e7bd      	b.n	80003ae <HAL_GPIO_Init+0xfe>
 8000432:	2202      	movs	r2, #2
 8000434:	e7bb      	b.n	80003ae <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000436:	4c12      	ldr	r4, [pc, #72]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000438:	6822      	ldr	r2, [r4, #0]
 800043a:	ea22 0203 	bic.w	r2, r2, r3
 800043e:	6022      	str	r2, [r4, #0]
 8000440:	e7c4      	b.n	80003cc <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000442:	4c0f      	ldr	r4, [pc, #60]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000444:	6862      	ldr	r2, [r4, #4]
 8000446:	ea22 0203 	bic.w	r2, r2, r3
 800044a:	6062      	str	r2, [r4, #4]
 800044c:	e7c6      	b.n	80003dc <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800044e:	4c0c      	ldr	r4, [pc, #48]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000450:	68a2      	ldr	r2, [r4, #8]
 8000452:	ea22 0203 	bic.w	r2, r2, r3
 8000456:	60a2      	str	r2, [r4, #8]
 8000458:	e7c8      	b.n	80003ec <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800045a:	4c09      	ldr	r4, [pc, #36]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 800045c:	68e2      	ldr	r2, [r4, #12]
 800045e:	ea22 0303 	bic.w	r3, r2, r3
 8000462:	60e3      	str	r3, [r4, #12]
 8000464:	e7ca      	b.n	80003fc <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8000466:	b002      	add	sp, #8
 8000468:	bcf0      	pop	{r4, r5, r6, r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000
 8000474:	40010800 	.word	0x40010800
 8000478:	10210000 	.word	0x10210000
 800047c:	10310000 	.word	0x10310000
 8000480:	40010400 	.word	0x40010400

08000484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000484:	b912      	cbnz	r2, 800048c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	6101      	str	r1, [r0, #16]
  }
}
 800048a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800048c:	6101      	str	r1, [r0, #16]
 800048e:	4770      	bx	lr

08000490 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000490:	68c3      	ldr	r3, [r0, #12]
 8000492:	4059      	eors	r1, r3
 8000494:	60c1      	str	r1, [r0, #12]
}
 8000496:	4770      	bx	lr

08000498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000498:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800049a:	4b08      	ldr	r3, [pc, #32]	; (80004bc <RCC_Delay+0x24>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <RCC_Delay+0x28>)
 80004a0:	fba2 2303 	umull	r2, r3, r2, r3
 80004a4:	0a5b      	lsrs	r3, r3, #9
 80004a6:	fb00 f003 	mul.w	r0, r0, r3
 80004aa:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80004ac:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80004ae:	9b01      	ldr	r3, [sp, #4]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	9201      	str	r2, [sp, #4]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1f9      	bne.n	80004ac <RCC_Delay+0x14>
}
 80004b8:	b002      	add	sp, #8
 80004ba:	4770      	bx	lr
 80004bc:	20000008 	.word	0x20000008
 80004c0:	10624dd3 	.word	0x10624dd3

080004c4 <HAL_RCC_OscConfig>:
{
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ca:	6803      	ldr	r3, [r0, #0]
 80004cc:	f013 0f01 	tst.w	r3, #1
 80004d0:	d02c      	beq.n	800052c <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004d2:	4bab      	ldr	r3, [pc, #684]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f003 030c 	and.w	r3, r3, #12
 80004da:	2b04      	cmp	r3, #4
 80004dc:	d01d      	beq.n	800051a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004de:	4ba8      	ldr	r3, [pc, #672]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	f003 030c 	and.w	r3, r3, #12
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d012      	beq.n	8000510 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ea:	6863      	ldr	r3, [r4, #4]
 80004ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004f0:	d041      	beq.n	8000576 <HAL_RCC_OscConfig+0xb2>
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d155      	bne.n	80005a2 <HAL_RCC_OscConfig+0xde>
 80004f6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004fa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e037      	b.n	8000580 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000510:	4b9b      	ldr	r3, [pc, #620]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000518:	d0e7      	beq.n	80004ea <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800051a:	4b99      	ldr	r3, [pc, #612]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000522:	d003      	beq.n	800052c <HAL_RCC_OscConfig+0x68>
 8000524:	6863      	ldr	r3, [r4, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	f000 81ae 	beq.w	8000888 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	f013 0f02 	tst.w	r3, #2
 8000532:	d076      	beq.n	8000622 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000534:	4b92      	ldr	r3, [pc, #584]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	f013 0f0c 	tst.w	r3, #12
 800053c:	d05f      	beq.n	80005fe <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800053e:	4b90      	ldr	r3, [pc, #576]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f003 030c 	and.w	r3, r3, #12
 8000546:	2b08      	cmp	r3, #8
 8000548:	d054      	beq.n	80005f4 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800054a:	6923      	ldr	r3, [r4, #16]
 800054c:	2b00      	cmp	r3, #0
 800054e:	f000 808a 	beq.w	8000666 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000552:	4b8c      	ldr	r3, [pc, #560]	; (8000784 <HAL_RCC_OscConfig+0x2c0>)
 8000554:	2201      	movs	r2, #1
 8000556:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000558:	f7ff fe3c 	bl	80001d4 <HAL_GetTick>
 800055c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800055e:	4b88      	ldr	r3, [pc, #544]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f013 0f02 	tst.w	r3, #2
 8000566:	d175      	bne.n	8000654 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000568:	f7ff fe34 	bl	80001d4 <HAL_GetTick>
 800056c:	1b40      	subs	r0, r0, r5
 800056e:	2802      	cmp	r0, #2
 8000570:	d9f5      	bls.n	800055e <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000572:	2003      	movs	r0, #3
 8000574:	e18b      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	4a82      	ldr	r2, [pc, #520]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000578:	6813      	ldr	r3, [r2, #0]
 800057a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000580:	6863      	ldr	r3, [r4, #4]
 8000582:	b343      	cbz	r3, 80005d6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000584:	f7ff fe26 	bl	80001d4 <HAL_GetTick>
 8000588:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058a:	4b7d      	ldr	r3, [pc, #500]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000592:	d1cb      	bne.n	800052c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000594:	f7ff fe1e 	bl	80001d4 <HAL_GetTick>
 8000598:	1b40      	subs	r0, r0, r5
 800059a:	2864      	cmp	r0, #100	; 0x64
 800059c:	d9f5      	bls.n	800058a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800059e:	2003      	movs	r0, #3
 80005a0:	e175      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005a6:	d009      	beq.n	80005bc <HAL_RCC_OscConfig+0xf8>
 80005a8:	4b75      	ldr	r3, [pc, #468]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e7e1      	b.n	8000580 <HAL_RCC_OscConfig+0xbc>
 80005bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005c0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e7d4      	b.n	8000580 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80005d6:	f7ff fdfd 	bl	80001d4 <HAL_GetTick>
 80005da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005dc:	4b68      	ldr	r3, [pc, #416]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005e4:	d0a2      	beq.n	800052c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005e6:	f7ff fdf5 	bl	80001d4 <HAL_GetTick>
 80005ea:	1b40      	subs	r0, r0, r5
 80005ec:	2864      	cmp	r0, #100	; 0x64
 80005ee:	d9f5      	bls.n	80005dc <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80005f0:	2003      	movs	r0, #3
 80005f2:	e14c      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f4:	4b62      	ldr	r3, [pc, #392]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005fc:	d1a5      	bne.n	800054a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005fe:	4b60      	ldr	r3, [pc, #384]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f013 0f02 	tst.w	r3, #2
 8000606:	d004      	beq.n	8000612 <HAL_RCC_OscConfig+0x14e>
 8000608:	6923      	ldr	r3, [r4, #16]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d001      	beq.n	8000612 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800060e:	2001      	movs	r0, #1
 8000610:	e13d      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000612:	4a5b      	ldr	r2, [pc, #364]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000614:	6813      	ldr	r3, [r2, #0]
 8000616:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800061a:	6961      	ldr	r1, [r4, #20]
 800061c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000620:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	f013 0f08 	tst.w	r3, #8
 8000628:	d032      	beq.n	8000690 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800062a:	69a3      	ldr	r3, [r4, #24]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d05b      	beq.n	80006e8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8000630:	4b55      	ldr	r3, [pc, #340]	; (8000788 <HAL_RCC_OscConfig+0x2c4>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000636:	f7ff fdcd 	bl	80001d4 <HAL_GetTick>
 800063a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800063c:	4b50      	ldr	r3, [pc, #320]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800063e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000640:	f013 0f02 	tst.w	r3, #2
 8000644:	d121      	bne.n	800068a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000646:	f7ff fdc5 	bl	80001d4 <HAL_GetTick>
 800064a:	1b40      	subs	r0, r0, r5
 800064c:	2802      	cmp	r0, #2
 800064e:	d9f5      	bls.n	800063c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000650:	2003      	movs	r0, #3
 8000652:	e11c      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000654:	4a4a      	ldr	r2, [pc, #296]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000656:	6813      	ldr	r3, [r2, #0]
 8000658:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800065c:	6961      	ldr	r1, [r4, #20]
 800065e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	e7dd      	b.n	8000622 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <HAL_RCC_OscConfig+0x2c0>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800066c:	f7ff fdb2 	bl	80001d4 <HAL_GetTick>
 8000670:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000672:	4b43      	ldr	r3, [pc, #268]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f013 0f02 	tst.w	r3, #2
 800067a:	d0d2      	beq.n	8000622 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800067c:	f7ff fdaa 	bl	80001d4 <HAL_GetTick>
 8000680:	1b40      	subs	r0, r0, r5
 8000682:	2802      	cmp	r0, #2
 8000684:	d9f5      	bls.n	8000672 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000686:	2003      	movs	r0, #3
 8000688:	e101      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ff04 	bl	8000498 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	f013 0f04 	tst.w	r3, #4
 8000696:	f000 8097 	beq.w	80007c8 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800069a:	4b39      	ldr	r3, [pc, #228]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80006a2:	d133      	bne.n	800070c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006ac:	61da      	str	r2, [r3, #28]
 80006ae:	69db      	ldr	r3, [r3, #28]
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80006b8:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <HAL_RCC_OscConfig+0x2c8>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80006c2:	d025      	beq.n	8000710 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c4:	68e3      	ldr	r3, [r4, #12]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d036      	beq.n	8000738 <HAL_RCC_OscConfig+0x274>
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d14c      	bne.n	8000768 <HAL_RCC_OscConfig+0x2a4>
 80006ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006d6:	6a1a      	ldr	r2, [r3, #32]
 80006d8:	f022 0201 	bic.w	r2, r2, #1
 80006dc:	621a      	str	r2, [r3, #32]
 80006de:	6a1a      	ldr	r2, [r3, #32]
 80006e0:	f022 0204 	bic.w	r2, r2, #4
 80006e4:	621a      	str	r2, [r3, #32]
 80006e6:	e02c      	b.n	8000742 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 80006e8:	4b27      	ldr	r3, [pc, #156]	; (8000788 <HAL_RCC_OscConfig+0x2c4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ee:	f7ff fd71 	bl	80001d4 <HAL_GetTick>
 80006f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	f013 0f02 	tst.w	r3, #2
 80006fc:	d0c8      	beq.n	8000690 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fe:	f7ff fd69 	bl	80001d4 <HAL_GetTick>
 8000702:	1b40      	subs	r0, r0, r5
 8000704:	2802      	cmp	r0, #2
 8000706:	d9f5      	bls.n	80006f4 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8000708:	2003      	movs	r0, #3
 800070a:	e0c0      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 800070c:	2500      	movs	r5, #0
 800070e:	e7d4      	b.n	80006ba <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000710:	4a1e      	ldr	r2, [pc, #120]	; (800078c <HAL_RCC_OscConfig+0x2c8>)
 8000712:	6813      	ldr	r3, [r2, #0]
 8000714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000718:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800071a:	f7ff fd5b 	bl	80001d4 <HAL_GetTick>
 800071e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <HAL_RCC_OscConfig+0x2c8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000728:	d1cc      	bne.n	80006c4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800072a:	f7ff fd53 	bl	80001d4 <HAL_GetTick>
 800072e:	1b80      	subs	r0, r0, r6
 8000730:	2864      	cmp	r0, #100	; 0x64
 8000732:	d9f5      	bls.n	8000720 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8000734:	2003      	movs	r0, #3
 8000736:	e0aa      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800073a:	6a13      	ldr	r3, [r2, #32]
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000742:	68e3      	ldr	r3, [r4, #12]
 8000744:	b373      	cbz	r3, 80007a4 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8000746:	f7ff fd45 	bl	80001d4 <HAL_GetTick>
 800074a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	f013 0f02 	tst.w	r3, #2
 8000754:	d137      	bne.n	80007c6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000756:	f7ff fd3d 	bl	80001d4 <HAL_GetTick>
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000760:	4298      	cmp	r0, r3
 8000762:	d9f3      	bls.n	800074c <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8000764:	2003      	movs	r0, #3
 8000766:	e092      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000768:	2b05      	cmp	r3, #5
 800076a:	d011      	beq.n	8000790 <HAL_RCC_OscConfig+0x2cc>
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <HAL_RCC_OscConfig+0x2bc>)
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	f022 0201 	bic.w	r2, r2, #1
 8000774:	621a      	str	r2, [r3, #32]
 8000776:	6a1a      	ldr	r2, [r3, #32]
 8000778:	f022 0204 	bic.w	r2, r2, #4
 800077c:	621a      	str	r2, [r3, #32]
 800077e:	e7e0      	b.n	8000742 <HAL_RCC_OscConfig+0x27e>
 8000780:	40021000 	.word	0x40021000
 8000784:	42420000 	.word	0x42420000
 8000788:	42420480 	.word	0x42420480
 800078c:	40007000 	.word	0x40007000
 8000790:	4b41      	ldr	r3, [pc, #260]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 8000792:	6a1a      	ldr	r2, [r3, #32]
 8000794:	f042 0204 	orr.w	r2, r2, #4
 8000798:	621a      	str	r2, [r3, #32]
 800079a:	6a1a      	ldr	r2, [r3, #32]
 800079c:	f042 0201 	orr.w	r2, r2, #1
 80007a0:	621a      	str	r2, [r3, #32]
 80007a2:	e7ce      	b.n	8000742 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 80007a4:	f7ff fd16 	bl	80001d4 <HAL_GetTick>
 80007a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f013 0f02 	tst.w	r3, #2
 80007b2:	d008      	beq.n	80007c6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007b4:	f7ff fd0e 	bl	80001d4 <HAL_GetTick>
 80007b8:	1b80      	subs	r0, r0, r6
 80007ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80007be:	4298      	cmp	r0, r3
 80007c0:	d9f3      	bls.n	80007aa <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80007c2:	2003      	movs	r0, #3
 80007c4:	e063      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80007c6:	b9e5      	cbnz	r5, 8000802 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007c8:	69e3      	ldr	r3, [r4, #28]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d05e      	beq.n	800088c <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007ce:	4a32      	ldr	r2, [pc, #200]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 80007d0:	6852      	ldr	r2, [r2, #4]
 80007d2:	f002 020c 	and.w	r2, r2, #12
 80007d6:	2a08      	cmp	r2, #8
 80007d8:	d05b      	beq.n	8000892 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007da:	2b02      	cmp	r3, #2
 80007dc:	d017      	beq.n	800080e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <HAL_RCC_OscConfig+0x3d8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e4:	f7ff fcf6 	bl	80001d4 <HAL_GetTick>
 80007e8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80007f2:	d047      	beq.n	8000884 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f4:	f7ff fcee 	bl	80001d4 <HAL_GetTick>
 80007f8:	1b00      	subs	r0, r0, r4
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f5      	bls.n	80007ea <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80007fe:	2003      	movs	r0, #3
 8000800:	e045      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 8000804:	69d3      	ldr	r3, [r2, #28]
 8000806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800080a:	61d3      	str	r3, [r2, #28]
 800080c:	e7dc      	b.n	80007c8 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <HAL_RCC_OscConfig+0x3d8>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000814:	f7ff fcde 	bl	80001d4 <HAL_GetTick>
 8000818:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000822:	d006      	beq.n	8000832 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000824:	f7ff fcd6 	bl	80001d4 <HAL_GetTick>
 8000828:	1b40      	subs	r0, r0, r5
 800082a:	2802      	cmp	r0, #2
 800082c:	d9f5      	bls.n	800081a <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800082e:	2003      	movs	r0, #3
 8000830:	e02d      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000832:	6a23      	ldr	r3, [r4, #32]
 8000834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000838:	d01a      	beq.n	8000870 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800083a:	4917      	ldr	r1, [pc, #92]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 800083c:	684b      	ldr	r3, [r1, #4]
 800083e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000842:	6a22      	ldr	r2, [r4, #32]
 8000844:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000846:	4302      	orrs	r2, r0
 8000848:	4313      	orrs	r3, r2
 800084a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_RCC_OscConfig+0x3d8>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000852:	f7ff fcbf 	bl	80001d4 <HAL_GetTick>
 8000856:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000860:	d10e      	bne.n	8000880 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000862:	f7ff fcb7 	bl	80001d4 <HAL_GetTick>
 8000866:	1b00      	subs	r0, r0, r4
 8000868:	2802      	cmp	r0, #2
 800086a:	d9f5      	bls.n	8000858 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 800086c:	2003      	movs	r0, #3
 800086e:	e00e      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000870:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_RCC_OscConfig+0x3d4>)
 8000872:	6853      	ldr	r3, [r2, #4]
 8000874:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000878:	68a1      	ldr	r1, [r4, #8]
 800087a:	430b      	orrs	r3, r1
 800087c:	6053      	str	r3, [r2, #4]
 800087e:	e7dc      	b.n	800083a <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000880:	2000      	movs	r0, #0
 8000882:	e004      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
 8000884:	2000      	movs	r0, #0
 8000886:	e002      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000888:	2001      	movs	r0, #1
 800088a:	e000      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800088c:	2000      	movs	r0, #0
}
 800088e:	b002      	add	sp, #8
 8000890:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e7fb      	b.n	800088e <HAL_RCC_OscConfig+0x3ca>
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000
 800089c:	42420060 	.word	0x42420060

080008a0 <HAL_RCC_GetSysClockFreq>:
{
 80008a0:	b410      	push	{r4}
 80008a2:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008a4:	4c16      	ldr	r4, [pc, #88]	; (8000900 <HAL_RCC_GetSysClockFreq+0x60>)
 80008a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008aa:	f10d 0c18 	add.w	ip, sp, #24
 80008ae:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008b2:	8a23      	ldrh	r3, [r4, #16]
 80008b4:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_RCC_GetSysClockFreq+0x64>)
 80008ba:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008bc:	f003 020c 	and.w	r2, r3, #12
 80008c0:	2a08      	cmp	r2, #8
 80008c2:	d11a      	bne.n	80008fa <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008c4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008c8:	4462      	add	r2, ip
 80008ca:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008d2:	d105      	bne.n	80008e0 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008d4:	480c      	ldr	r0, [pc, #48]	; (8000908 <HAL_RCC_GetSysClockFreq+0x68>)
 80008d6:	fb00 f002 	mul.w	r0, r0, r2
}
 80008da:	b007      	add	sp, #28
 80008dc:	bc10      	pop	{r4}
 80008de:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_RCC_GetSysClockFreq+0x64>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80008e8:	4463      	add	r3, ip
 80008ea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <HAL_RCC_GetSysClockFreq+0x6c>)
 80008f0:	fb00 f002 	mul.w	r0, r0, r2
 80008f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80008f8:	e7ef      	b.n	80008da <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80008fc:	e7ed      	b.n	80008da <HAL_RCC_GetSysClockFreq+0x3a>
 80008fe:	bf00      	nop
 8000900:	08001650 	.word	0x08001650
 8000904:	40021000 	.word	0x40021000
 8000908:	003d0900 	.word	0x003d0900
 800090c:	007a1200 	.word	0x007a1200

08000910 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000910:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <HAL_RCC_ClockConfig+0x18c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	428b      	cmp	r3, r1
 800091a:	d20c      	bcs.n	8000936 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800091c:	4a5f      	ldr	r2, [pc, #380]	; (8000a9c <HAL_RCC_ClockConfig+0x18c>)
 800091e:	6813      	ldr	r3, [r2, #0]
 8000920:	f023 0307 	bic.w	r3, r3, #7
 8000924:	430b      	orrs	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	428b      	cmp	r3, r1
 8000930:	d001      	beq.n	8000936 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000932:	2001      	movs	r0, #1
}
 8000934:	4770      	bx	lr
{
 8000936:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000938:	6803      	ldr	r3, [r0, #0]
 800093a:	f013 0f02 	tst.w	r3, #2
 800093e:	d017      	beq.n	8000970 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000940:	f013 0f04 	tst.w	r3, #4
 8000944:	d004      	beq.n	8000950 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000946:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000948:	6853      	ldr	r3, [r2, #4]
 800094a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800094e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	f013 0f08 	tst.w	r3, #8
 8000956:	d004      	beq.n	8000962 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000958:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 800095a:	6853      	ldr	r3, [r2, #4]
 800095c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000960:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000962:	4a4f      	ldr	r2, [pc, #316]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000964:	6853      	ldr	r3, [r2, #4]
 8000966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800096a:	6884      	ldr	r4, [r0, #8]
 800096c:	4323      	orrs	r3, r4
 800096e:	6053      	str	r3, [r2, #4]
 8000970:	460d      	mov	r5, r1
 8000972:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000974:	6803      	ldr	r3, [r0, #0]
 8000976:	f013 0f01 	tst.w	r3, #1
 800097a:	d052      	beq.n	8000a22 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097c:	6843      	ldr	r3, [r0, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d023      	beq.n	80009ca <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000982:	2b02      	cmp	r3, #2
 8000984:	d028      	beq.n	80009d8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000986:	4a46      	ldr	r2, [pc, #280]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000988:	6812      	ldr	r2, [r2, #0]
 800098a:	f012 0f02 	tst.w	r2, #2
 800098e:	f000 8082 	beq.w	8000a96 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000992:	4943      	ldr	r1, [pc, #268]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000994:	684a      	ldr	r2, [r1, #4]
 8000996:	f022 0203 	bic.w	r2, r2, #3
 800099a:	4313      	orrs	r3, r2
 800099c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800099e:	f7ff fc19 	bl	80001d4 <HAL_GetTick>
 80009a2:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a4:	6863      	ldr	r3, [r4, #4]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d01d      	beq.n	80009e6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d02a      	beq.n	8000a04 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009ae:	4b3c      	ldr	r3, [pc, #240]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f013 0f0c 	tst.w	r3, #12
 80009b6:	d034      	beq.n	8000a22 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b8:	f7ff fc0c 	bl	80001d4 <HAL_GetTick>
 80009bc:	1b80      	subs	r0, r0, r6
 80009be:	f241 3388 	movw	r3, #5000	; 0x1388
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d9f3      	bls.n	80009ae <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e064      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80009d2:	d1de      	bne.n	8000992 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009d4:	2001      	movs	r0, #1
 80009d6:	e05d      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009d8:	4a31      	ldr	r2, [pc, #196]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 80009da:	6812      	ldr	r2, [r2, #0]
 80009dc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80009e0:	d1d7      	bne.n	8000992 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009e2:	2001      	movs	r0, #1
 80009e4:	e056      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009e6:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f003 030c 	and.w	r3, r3, #12
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d017      	beq.n	8000a22 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f2:	f7ff fbef 	bl	80001d4 <HAL_GetTick>
 80009f6:	1b80      	subs	r0, r0, r6
 80009f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80009fc:	4298      	cmp	r0, r3
 80009fe:	d9f2      	bls.n	80009e6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000a00:	2003      	movs	r0, #3
 8000a02:	e047      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a04:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f003 030c 	and.w	r3, r3, #12
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d008      	beq.n	8000a22 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a10:	f7ff fbe0 	bl	80001d4 <HAL_GetTick>
 8000a14:	1b80      	subs	r0, r0, r6
 8000a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a1a:	4298      	cmp	r0, r3
 8000a1c:	d9f2      	bls.n	8000a04 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000a1e:	2003      	movs	r0, #3
 8000a20:	e038      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_RCC_ClockConfig+0x18c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d90c      	bls.n	8000a48 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a2e:	4a1b      	ldr	r2, [pc, #108]	; (8000a9c <HAL_RCC_ClockConfig+0x18c>)
 8000a30:	6813      	ldr	r3, [r2, #0]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	432b      	orrs	r3, r5
 8000a38:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a3a:	6813      	ldr	r3, [r2, #0]
 8000a3c:	f003 0307 	and.w	r3, r3, #7
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d001      	beq.n	8000a48 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000a44:	2001      	movs	r0, #1
 8000a46:	e025      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a48:	6823      	ldr	r3, [r4, #0]
 8000a4a:	f013 0f04 	tst.w	r3, #4
 8000a4e:	d006      	beq.n	8000a5e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000a52:	6853      	ldr	r3, [r2, #4]
 8000a54:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a58:	68e1      	ldr	r1, [r4, #12]
 8000a5a:	430b      	orrs	r3, r1
 8000a5c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	f013 0f08 	tst.w	r3, #8
 8000a64:	d007      	beq.n	8000a76 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000a68:	6853      	ldr	r3, [r2, #4]
 8000a6a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a6e:	6921      	ldr	r1, [r4, #16]
 8000a70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a74:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a76:	f7ff ff13 	bl	80008a0 <HAL_RCC_GetSysClockFreq>
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_RCC_ClockConfig+0x190>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_RCC_ClockConfig+0x194>)
 8000a84:	5cd3      	ldrb	r3, [r2, r3]
 8000a86:	40d8      	lsrs	r0, r3
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_RCC_ClockConfig+0x198>)
 8000a8a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff fb5d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a92:	2000      	movs	r0, #0
}
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000a96:	2001      	movs	r0, #1
 8000a98:	e7fc      	b.n	8000a94 <HAL_RCC_ClockConfig+0x184>
 8000a9a:	bf00      	nop
 8000a9c:	40022000 	.word	0x40022000
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	08001664 	.word	0x08001664
 8000aa8:	20000008 	.word	0x20000008

08000aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000aac:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000aae:	6a03      	ldr	r3, [r0, #32]
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ab6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ab8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000aba:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000abc:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ac0:	680d      	ldr	r5, [r1, #0]
 8000ac2:	ea45 0604 	orr.w	r6, r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000ac6:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000aca:	688b      	ldr	r3, [r1, #8]
 8000acc:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000ace:	4d0d      	ldr	r5, [pc, #52]	; (8000b04 <TIM_OC1_SetConfig+0x58>)
 8000ad0:	42a8      	cmp	r0, r5
 8000ad2:	d009      	beq.n	8000ae8 <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ad4:	4d0b      	ldr	r5, [pc, #44]	; (8000b04 <TIM_OC1_SetConfig+0x58>)
 8000ad6:	42a8      	cmp	r0, r5
 8000ad8:	d00d      	beq.n	8000af6 <TIM_OC1_SetConfig+0x4a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ada:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000adc:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000ade:	684a      	ldr	r2, [r1, #4]
 8000ae0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ae2:	6203      	str	r3, [r0, #32]
}
 8000ae4:	bc70      	pop	{r4, r5, r6}
 8000ae6:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8000ae8:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000aec:	68cc      	ldr	r4, [r1, #12]
 8000aee:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8000af0:	f023 0304 	bic.w	r3, r3, #4
 8000af4:	e7ee      	b.n	8000ad4 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000af6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8000afa:	694c      	ldr	r4, [r1, #20]
 8000afc:	4314      	orrs	r4, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 8000afe:	698a      	ldr	r2, [r1, #24]
 8000b00:	4322      	orrs	r2, r4
 8000b02:	e7ea      	b.n	8000ada <TIM_OC1_SetConfig+0x2e>
 8000b04:	40012c00 	.word	0x40012c00

08000b08 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000b08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000b0a:	6a03      	ldr	r3, [r0, #32]
 8000b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b14:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b16:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000b18:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b1c:	680d      	ldr	r5, [r1, #0]
 8000b1e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000b24:	688d      	ldr	r5, [r1, #8]
 8000b26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000b2a:	4d0f      	ldr	r5, [pc, #60]	; (8000b68 <TIM_OC3_SetConfig+0x60>)
 8000b2c:	42a8      	cmp	r0, r5
 8000b2e:	d009      	beq.n	8000b44 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000b30:	4d0d      	ldr	r5, [pc, #52]	; (8000b68 <TIM_OC3_SetConfig+0x60>)
 8000b32:	42a8      	cmp	r0, r5
 8000b34:	d00e      	beq.n	8000b54 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b36:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b38:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000b3a:	684a      	ldr	r2, [r1, #4]
 8000b3c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b3e:	6203      	str	r3, [r0, #32]
}
 8000b40:	bc30      	pop	{r4, r5}
 8000b42:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8000b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000b48:	68cd      	ldr	r5, [r1, #12]
 8000b4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8000b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b52:	e7ed      	b.n	8000b30 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000b54:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000b58:	694d      	ldr	r5, [r1, #20]
 8000b5a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000b5e:	698d      	ldr	r5, [r1, #24]
 8000b60:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8000b64:	e7e7      	b.n	8000b36 <TIM_OC3_SetConfig+0x2e>
 8000b66:	bf00      	nop
 8000b68:	40012c00 	.word	0x40012c00

08000b6c <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000b6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b6e:	6a03      	ldr	r3, [r0, #32]
 8000b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b7c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b80:	680d      	ldr	r5, [r1, #0]
 8000b82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000b86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b8a:	688d      	ldr	r5, [r1, #8]
 8000b8c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000b90:	4d07      	ldr	r5, [pc, #28]	; (8000bb0 <TIM_OC4_SetConfig+0x44>)
 8000b92:	42a8      	cmp	r0, r5
 8000b94:	d006      	beq.n	8000ba4 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b96:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b98:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b9a:	684a      	ldr	r2, [r1, #4]
 8000b9c:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b9e:	6203      	str	r3, [r0, #32]
}
 8000ba0:	bc30      	pop	{r4, r5}
 8000ba2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ba4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000ba8:	694d      	ldr	r5, [r1, #20]
 8000baa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8000bae:	e7f2      	b.n	8000b96 <TIM_OC4_SetConfig+0x2a>
 8000bb0:	40012c00 	.word	0x40012c00

08000bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000bb4:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000bb6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000bb8:	6a04      	ldr	r4, [r0, #32]
 8000bba:	f024 0401 	bic.w	r4, r4, #1
 8000bbe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000bc0:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000bc2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000bc6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000bca:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000bce:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000bd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000bd2:	6203      	str	r3, [r0, #32]
}
 8000bd4:	bc10      	pop	{r4}
 8000bd6:	4770      	bx	lr

08000bd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000bd8:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000bda:	6a03      	ldr	r3, [r0, #32]
 8000bdc:	f023 0310 	bic.w	r3, r3, #16
 8000be0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000be2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000be4:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000be6:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000bea:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000bee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000bf2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000bf6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000bf8:	6203      	str	r3, [r0, #32]
}
 8000bfa:	bc10      	pop	{r4}
 8000bfc:	4770      	bx	lr

08000bfe <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000bfe:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c04:	f041 0107 	orr.w	r1, r1, #7
 8000c08:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000c0a:	6081      	str	r1, [r0, #8]
}
 8000c0c:	4770      	bx	lr

08000c0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000c0e:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000c10:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c12:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000c16:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000c1a:	430b      	orrs	r3, r1
 8000c1c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c1e:	6083      	str	r3, [r0, #8]
}
 8000c20:	bc10      	pop	{r4}
 8000c22:	4770      	bx	lr

08000c24 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c24:	6802      	ldr	r2, [r0, #0]
 8000c26:	68d3      	ldr	r3, [r2, #12]
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8000c2e:	6802      	ldr	r2, [r0, #0]
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	2000      	movs	r0, #0
 8000c3a:	4770      	bx	lr

08000c3c <HAL_TIM_PWM_MspInit>:
}
 8000c3c:	4770      	bx	lr

08000c3e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000c3e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d07d      	beq.n	8000d42 <HAL_TIM_ConfigClockSource+0x104>
{
 8000c46:	b510      	push	{r4, lr}
 8000c48:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000c50:	2302      	movs	r3, #2
 8000c52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000c56:	6802      	ldr	r2, [r0, #0]
 8000c58:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c62:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000c64:	680b      	ldr	r3, [r1, #0]
 8000c66:	2b40      	cmp	r3, #64	; 0x40
 8000c68:	d057      	beq.n	8000d1a <HAL_TIM_ConfigClockSource+0xdc>
 8000c6a:	d910      	bls.n	8000c8e <HAL_TIM_ConfigClockSource+0x50>
 8000c6c:	2b70      	cmp	r3, #112	; 0x70
 8000c6e:	d03e      	beq.n	8000cee <HAL_TIM_ConfigClockSource+0xb0>
 8000c70:	d81f      	bhi.n	8000cb2 <HAL_TIM_ConfigClockSource+0x74>
 8000c72:	2b50      	cmp	r3, #80	; 0x50
 8000c74:	d047      	beq.n	8000d06 <HAL_TIM_ConfigClockSource+0xc8>
 8000c76:	2b60      	cmp	r3, #96	; 0x60
 8000c78:	d132      	bne.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000c7a:	68ca      	ldr	r2, [r1, #12]
 8000c7c:	6849      	ldr	r1, [r1, #4]
 8000c7e:	6800      	ldr	r0, [r0, #0]
 8000c80:	f7ff ffaa 	bl	8000bd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000c84:	2160      	movs	r1, #96	; 0x60
 8000c86:	6820      	ldr	r0, [r4, #0]
 8000c88:	f7ff ffb9 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000c8c:	e028      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000c8e:	2b10      	cmp	r3, #16
 8000c90:	d04d      	beq.n	8000d2e <HAL_TIM_ConfigClockSource+0xf0>
 8000c92:	d908      	bls.n	8000ca6 <HAL_TIM_ConfigClockSource+0x68>
 8000c94:	2b20      	cmp	r3, #32
 8000c96:	d04f      	beq.n	8000d38 <HAL_TIM_ConfigClockSource+0xfa>
 8000c98:	2b30      	cmp	r3, #48	; 0x30
 8000c9a:	d121      	bne.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8000c9c:	2130      	movs	r1, #48	; 0x30
 8000c9e:	6800      	ldr	r0, [r0, #0]
 8000ca0:	f7ff ffad 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000ca4:	e01c      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000ca6:	b9db      	cbnz	r3, 8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	6800      	ldr	r0, [r0, #0]
 8000cac:	f7ff ffa7 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000cb0:	e016      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cb6:	d00e      	beq.n	8000cd6 <HAL_TIM_ConfigClockSource+0x98>
 8000cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cbc:	d110      	bne.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8000cbe:	68cb      	ldr	r3, [r1, #12]
 8000cc0:	684a      	ldr	r2, [r1, #4]
 8000cc2:	6889      	ldr	r1, [r1, #8]
 8000cc4:	6800      	ldr	r0, [r0, #0]
 8000cc6:	f7ff ffa2 	bl	8000c0e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000cca:	6822      	ldr	r2, [r4, #0]
 8000ccc:	6893      	ldr	r3, [r2, #8]
 8000cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd2:	6093      	str	r3, [r2, #8]
    break;
 8000cd4:	e004      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000cd6:	6802      	ldr	r2, [r0, #0]
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	f023 0307 	bic.w	r3, r3, #7
 8000cde:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000cec:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8000cee:	68cb      	ldr	r3, [r1, #12]
 8000cf0:	684a      	ldr	r2, [r1, #4]
 8000cf2:	6889      	ldr	r1, [r1, #8]
 8000cf4:	6800      	ldr	r0, [r0, #0]
 8000cf6:	f7ff ff8a 	bl	8000c0e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000cfa:	6822      	ldr	r2, [r4, #0]
 8000cfc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8000d02:	6093      	str	r3, [r2, #8]
    break;
 8000d04:	e7ec      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d06:	68ca      	ldr	r2, [r1, #12]
 8000d08:	6849      	ldr	r1, [r1, #4]
 8000d0a:	6800      	ldr	r0, [r0, #0]
 8000d0c:	f7ff ff52 	bl	8000bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000d10:	2150      	movs	r1, #80	; 0x50
 8000d12:	6820      	ldr	r0, [r4, #0]
 8000d14:	f7ff ff73 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000d18:	e7e2      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d1a:	68ca      	ldr	r2, [r1, #12]
 8000d1c:	6849      	ldr	r1, [r1, #4]
 8000d1e:	6800      	ldr	r0, [r0, #0]
 8000d20:	f7ff ff48 	bl	8000bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	6820      	ldr	r0, [r4, #0]
 8000d28:	f7ff ff69 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000d2c:	e7d8      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8000d2e:	2110      	movs	r1, #16
 8000d30:	6800      	ldr	r0, [r0, #0]
 8000d32:	f7ff ff64 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000d36:	e7d3      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	6800      	ldr	r0, [r0, #0]
 8000d3c:	f7ff ff5f 	bl	8000bfe <TIM_ITRx_SetConfig>
    break;
 8000d40:	e7ce      	b.n	8000ce0 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8000d42:	2002      	movs	r0, #2
}
 8000d44:	4770      	bx	lr

08000d46 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8000d46:	4770      	bx	lr

08000d48 <HAL_TIM_IC_CaptureCallback>:
}
 8000d48:	4770      	bx	lr

08000d4a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8000d4a:	4770      	bx	lr

08000d4c <HAL_TIM_TriggerCallback>:
}
 8000d4c:	4770      	bx	lr

08000d4e <HAL_TIM_IRQHandler>:
{
 8000d4e:	b510      	push	{r4, lr}
 8000d50:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d52:	6803      	ldr	r3, [r0, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	f012 0f02 	tst.w	r2, #2
 8000d5a:	d011      	beq.n	8000d80 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	f012 0f02 	tst.w	r2, #2
 8000d62:	d00d      	beq.n	8000d80 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d64:	f06f 0202 	mvn.w	r2, #2
 8000d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d6e:	6803      	ldr	r3, [r0, #0]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f013 0f03 	tst.w	r3, #3
 8000d76:	d070      	beq.n	8000e5a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8000d78:	f7ff ffe6 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	f012 0f04 	tst.w	r2, #4
 8000d88:	d012      	beq.n	8000db0 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	f012 0f04 	tst.w	r2, #4
 8000d90:	d00e      	beq.n	8000db0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d92:	f06f 0204 	mvn.w	r2, #4
 8000d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8000da4:	d05f      	beq.n	8000e66 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8000da6:	4620      	mov	r0, r4
 8000da8:	f7ff ffce 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dac:	2300      	movs	r3, #0
 8000dae:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	691a      	ldr	r2, [r3, #16]
 8000db4:	f012 0f08 	tst.w	r2, #8
 8000db8:	d012      	beq.n	8000de0 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dba:	68da      	ldr	r2, [r3, #12]
 8000dbc:	f012 0f08 	tst.w	r2, #8
 8000dc0:	d00e      	beq.n	8000de0 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dc2:	f06f 0208 	mvn.w	r2, #8
 8000dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	f013 0f03 	tst.w	r3, #3
 8000dd4:	d04e      	beq.n	8000e74 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dd6:	4620      	mov	r0, r4
 8000dd8:	f7ff ffb6 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000de0:	6823      	ldr	r3, [r4, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	f012 0f10 	tst.w	r2, #16
 8000de8:	d012      	beq.n	8000e10 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	f012 0f10 	tst.w	r2, #16
 8000df0:	d00e      	beq.n	8000e10 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000df2:	f06f 0210 	mvn.w	r2, #16
 8000df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	f413 7f40 	tst.w	r3, #768	; 0x300
 8000e04:	d03d      	beq.n	8000e82 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e06:	4620      	mov	r0, r4
 8000e08:	f7ff ff9e 	bl	8000d48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	f012 0f01 	tst.w	r2, #1
 8000e18:	d003      	beq.n	8000e22 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e1a:	68da      	ldr	r2, [r3, #12]
 8000e1c:	f012 0f01 	tst.w	r2, #1
 8000e20:	d136      	bne.n	8000e90 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	691a      	ldr	r2, [r3, #16]
 8000e26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000e2a:	d003      	beq.n	8000e34 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000e32:	d134      	bne.n	8000e9e <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000e3c:	d003      	beq.n	8000e46 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000e44:	d132      	bne.n	8000eac <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	f012 0f20 	tst.w	r2, #32
 8000e4e:	d003      	beq.n	8000e58 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	f012 0f20 	tst.w	r2, #32
 8000e56:	d130      	bne.n	8000eba <HAL_TIM_IRQHandler+0x16c>
}
 8000e58:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e5a:	f7ff ff74 	bl	8000d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f7ff ff73 	bl	8000d4a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e64:	e78a      	b.n	8000d7c <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff ff6d 	bl	8000d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	f7ff ff6c 	bl	8000d4a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e72:	e79b      	b.n	8000dac <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff ff66 	bl	8000d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	f7ff ff65 	bl	8000d4a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e80:	e7ac      	b.n	8000ddc <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff ff5f 	bl	8000d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	f7ff ff5e 	bl	8000d4a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e8e:	e7bd      	b.n	8000e0c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e90:	f06f 0201 	mvn.w	r2, #1
 8000e94:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e96:	4620      	mov	r0, r4
 8000e98:	f000 fa76 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
 8000e9c:	e7c1      	b.n	8000e22 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ea2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f000 f96b 	bl	8001180 <HAL_TIMEx_BreakCallback>
 8000eaa:	e7c3      	b.n	8000e34 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000eb0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff ff4a 	bl	8000d4c <HAL_TIM_TriggerCallback>
 8000eb8:	e7c5      	b.n	8000e46 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000eba:	f06f 0220 	mvn.w	r2, #32
 8000ebe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f000 f95c 	bl	800117e <HAL_TIMEx_CommutationCallback>
}
 8000ec6:	e7c7      	b.n	8000e58 <HAL_TIM_IRQHandler+0x10a>

08000ec8 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8000ec8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <TIM_Base_SetConfig+0x70>)
 8000ecc:	4290      	cmp	r0, r2
 8000ece:	d00a      	beq.n	8000ee6 <TIM_Base_SetConfig+0x1e>
 8000ed0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ed4:	d007      	beq.n	8000ee6 <TIM_Base_SetConfig+0x1e>
 8000ed6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000eda:	4290      	cmp	r0, r2
 8000edc:	d003      	beq.n	8000ee6 <TIM_Base_SetConfig+0x1e>
 8000ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d103      	bne.n	8000eee <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000eea:	684a      	ldr	r2, [r1, #4]
 8000eec:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <TIM_Base_SetConfig+0x70>)
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	d00a      	beq.n	8000f0a <TIM_Base_SetConfig+0x42>
 8000ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ef8:	d007      	beq.n	8000f0a <TIM_Base_SetConfig+0x42>
 8000efa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000efe:	4290      	cmp	r0, r2
 8000f00:	d003      	beq.n	8000f0a <TIM_Base_SetConfig+0x42>
 8000f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f06:	4290      	cmp	r0, r2
 8000f08:	d103      	bne.n	8000f12 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f0e:	68ca      	ldr	r2, [r1, #12]
 8000f10:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000f16:	694a      	ldr	r2, [r1, #20]
 8000f18:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f1a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f1c:	688b      	ldr	r3, [r1, #8]
 8000f1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f20:	680b      	ldr	r3, [r1, #0]
 8000f22:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <TIM_Base_SetConfig+0x70>)
 8000f26:	4298      	cmp	r0, r3
 8000f28:	d002      	beq.n	8000f30 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	6143      	str	r3, [r0, #20]
}
 8000f2e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f30:	690b      	ldr	r3, [r1, #16]
 8000f32:	6303      	str	r3, [r0, #48]	; 0x30
 8000f34:	e7f9      	b.n	8000f2a <TIM_Base_SetConfig+0x62>
 8000f36:	bf00      	nop
 8000f38:	40012c00 	.word	0x40012c00

08000f3c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8000f3c:	b1a8      	cbz	r0, 8000f6a <HAL_TIM_Base_Init+0x2e>
{
 8000f3e:	b510      	push	{r4, lr}
 8000f40:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f46:	b15b      	cbz	r3, 8000f60 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f4e:	1d21      	adds	r1, r4, #4
 8000f50:	6820      	ldr	r0, [r4, #0]
 8000f52:	f7ff ffb9 	bl	8000ec8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f56:	2301      	movs	r3, #1
 8000f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f5c:	2000      	movs	r0, #0
}
 8000f5e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000f60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f64:	f000 fa7e 	bl	8001464 <HAL_TIM_Base_MspInit>
 8000f68:	e7ee      	b.n	8000f48 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8000f6a:	2001      	movs	r0, #1
}
 8000f6c:	4770      	bx	lr

08000f6e <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8000f6e:	b1a8      	cbz	r0, 8000f9c <HAL_TIM_PWM_Init+0x2e>
{
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f78:	b15b      	cbz	r3, 8000f92 <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f80:	1d21      	adds	r1, r4, #4
 8000f82:	6820      	ldr	r0, [r4, #0]
 8000f84:	f7ff ffa0 	bl	8000ec8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f8e:	2000      	movs	r0, #0
}
 8000f90:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000f92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000f96:	f7ff fe51 	bl	8000c3c <HAL_TIM_PWM_MspInit>
 8000f9a:	e7ee      	b.n	8000f7a <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8000f9c:	2001      	movs	r0, #1
}
 8000f9e:	4770      	bx	lr

08000fa0 <TIM_OC2_SetConfig>:
{
 8000fa0:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fa2:	6a03      	ldr	r3, [r0, #32]
 8000fa4:	f023 0310 	bic.w	r3, r3, #16
 8000fa8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000faa:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000fac:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000fae:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000fb0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fb4:	680d      	ldr	r5, [r1, #0]
 8000fb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8000fba:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000fbe:	688d      	ldr	r5, [r1, #8]
 8000fc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000fc4:	4d0e      	ldr	r5, [pc, #56]	; (8001000 <TIM_OC2_SetConfig+0x60>)
 8000fc6:	42a8      	cmp	r0, r5
 8000fc8:	d009      	beq.n	8000fde <TIM_OC2_SetConfig+0x3e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fca:	4d0d      	ldr	r5, [pc, #52]	; (8001000 <TIM_OC2_SetConfig+0x60>)
 8000fcc:	42a8      	cmp	r0, r5
 8000fce:	d00e      	beq.n	8000fee <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8000fd0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000fd2:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000fd4:	684a      	ldr	r2, [r1, #4]
 8000fd6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000fd8:	6203      	str	r3, [r0, #32]
}
 8000fda:	bc30      	pop	{r4, r5}
 8000fdc:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8000fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000fe2:	68cd      	ldr	r5, [r1, #12]
 8000fe4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8000fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fec:	e7ed      	b.n	8000fca <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000fee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000ff2:	694d      	ldr	r5, [r1, #20]
 8000ff4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000ff8:	698d      	ldr	r5, [r1, #24]
 8000ffa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8000ffe:	e7e7      	b.n	8000fd0 <TIM_OC2_SetConfig+0x30>
 8001000:	40012c00 	.word	0x40012c00

08001004 <HAL_TIM_PWM_ConfigChannel>:
{
 8001004:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001006:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800100a:	2b01      	cmp	r3, #1
 800100c:	d066      	beq.n	80010dc <HAL_TIM_PWM_ConfigChannel+0xd8>
 800100e:	460d      	mov	r5, r1
 8001010:	4604      	mov	r4, r0
 8001012:	2301      	movs	r3, #1
 8001014:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001018:	2302      	movs	r3, #2
 800101a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800101e:	2a0c      	cmp	r2, #12
 8001020:	d81a      	bhi.n	8001058 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001022:	e8df f002 	tbb	[pc, r2]
 8001026:	1907      	.short	0x1907
 8001028:	19201919 	.word	0x19201919
 800102c:	19341919 	.word	0x19341919
 8001030:	1919      	.short	0x1919
 8001032:	47          	.byte	0x47
 8001033:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001034:	6800      	ldr	r0, [r0, #0]
 8001036:	f7ff fd39 	bl	8000aac <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800103a:	6822      	ldr	r2, [r4, #0]
 800103c:	6993      	ldr	r3, [r2, #24]
 800103e:	f043 0308 	orr.w	r3, r3, #8
 8001042:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001044:	6822      	ldr	r2, [r4, #0]
 8001046:	6993      	ldr	r3, [r2, #24]
 8001048:	f023 0304 	bic.w	r3, r3, #4
 800104c:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800104e:	6822      	ldr	r2, [r4, #0]
 8001050:	6993      	ldr	r3, [r2, #24]
 8001052:	6929      	ldr	r1, [r5, #16]
 8001054:	430b      	orrs	r3, r1
 8001056:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001058:	2301      	movs	r3, #1
 800105a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800105e:	2000      	movs	r0, #0
 8001060:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001064:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001066:	6800      	ldr	r0, [r0, #0]
 8001068:	f7ff ff9a 	bl	8000fa0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	6993      	ldr	r3, [r2, #24]
 8001070:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001074:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	6993      	ldr	r3, [r2, #24]
 800107a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800107e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001080:	6822      	ldr	r2, [r4, #0]
 8001082:	6993      	ldr	r3, [r2, #24]
 8001084:	6929      	ldr	r1, [r5, #16]
 8001086:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800108a:	6193      	str	r3, [r2, #24]
    break;
 800108c:	e7e4      	b.n	8001058 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800108e:	6800      	ldr	r0, [r0, #0]
 8001090:	f7ff fd3a 	bl	8000b08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	69d3      	ldr	r3, [r2, #28]
 8001098:	f043 0308 	orr.w	r3, r3, #8
 800109c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800109e:	6822      	ldr	r2, [r4, #0]
 80010a0:	69d3      	ldr	r3, [r2, #28]
 80010a2:	f023 0304 	bic.w	r3, r3, #4
 80010a6:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	69d3      	ldr	r3, [r2, #28]
 80010ac:	6929      	ldr	r1, [r5, #16]
 80010ae:	430b      	orrs	r3, r1
 80010b0:	61d3      	str	r3, [r2, #28]
    break;
 80010b2:	e7d1      	b.n	8001058 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80010b4:	6800      	ldr	r0, [r0, #0]
 80010b6:	f7ff fd59 	bl	8000b6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80010ba:	6822      	ldr	r2, [r4, #0]
 80010bc:	69d3      	ldr	r3, [r2, #28]
 80010be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	69d3      	ldr	r3, [r2, #28]
 80010c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80010ce:	6822      	ldr	r2, [r4, #0]
 80010d0:	69d3      	ldr	r3, [r2, #28]
 80010d2:	6929      	ldr	r1, [r5, #16]
 80010d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80010d8:	61d3      	str	r3, [r2, #28]
    break;
 80010da:	e7bd      	b.n	8001058 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 80010dc:	2002      	movs	r0, #2
 80010de:	e7c1      	b.n	8001064 <HAL_TIM_PWM_ConfigChannel+0x60>

080010e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80010e0:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80010e2:	2301      	movs	r3, #1
 80010e4:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80010e8:	6a03      	ldr	r3, [r0, #32]
 80010ea:	ea23 0304 	bic.w	r3, r3, r4
 80010ee:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80010f0:	6a03      	ldr	r3, [r0, #32]
 80010f2:	408a      	lsls	r2, r1
 80010f4:	4313      	orrs	r3, r2
 80010f6:	6203      	str	r3, [r0, #32]
}
 80010f8:	bc10      	pop	{r4}
 80010fa:	4770      	bx	lr

080010fc <HAL_TIM_PWM_Start>:
{
 80010fc:	b510      	push	{r4, lr}
 80010fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001100:	2201      	movs	r2, #1
 8001102:	6800      	ldr	r0, [r0, #0]
 8001104:	f7ff ffec 	bl	80010e0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_TIM_PWM_Start+0x2c>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d006      	beq.n	800111e <HAL_TIM_PWM_Start+0x22>
  __HAL_TIM_ENABLE(htim);
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	6813      	ldr	r3, [r2, #0]
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6013      	str	r3, [r2, #0]
}
 800111a:	2000      	movs	r0, #0
 800111c:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800111e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001120:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
 8001126:	e7f3      	b.n	8001110 <HAL_TIM_PWM_Start+0x14>
 8001128:	40012c00 	.word	0x40012c00

0800112c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800112c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001130:	2b01      	cmp	r3, #1
 8001132:	d022      	beq.n	800117a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8001134:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001136:	2201      	movs	r2, #1
 8001138:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800113c:	2302      	movs	r3, #2
 800113e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001142:	6804      	ldr	r4, [r0, #0]
 8001144:	6863      	ldr	r3, [r4, #4]
 8001146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800114a:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800114c:	6804      	ldr	r4, [r0, #0]
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	680d      	ldr	r5, [r1, #0]
 8001152:	432b      	orrs	r3, r5
 8001154:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001156:	6804      	ldr	r4, [r0, #0]
 8001158:	68a3      	ldr	r3, [r4, #8]
 800115a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800115e:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001160:	6804      	ldr	r4, [r0, #0]
 8001162:	68a3      	ldr	r3, [r4, #8]
 8001164:	6849      	ldr	r1, [r1, #4]
 8001166:	430b      	orrs	r3, r1
 8001168:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 800116a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800116e:	2300      	movs	r3, #0
 8001170:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001174:	4618      	mov	r0, r3
}
 8001176:	bc30      	pop	{r4, r5}
 8001178:	4770      	bx	lr
  __HAL_LOCK(htim);
 800117a:	2002      	movs	r0, #2
}
 800117c:	4770      	bx	lr

0800117e <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800117e:	4770      	bx	lr

08001180 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001180:	4770      	bx	lr
	...

08001184 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001184:	b530      	push	{r4, r5, lr}
 8001186:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	2400      	movs	r4, #0
 800118a:	9404      	str	r4, [sp, #16]
 800118c:	9405      	str	r4, [sp, #20]
 800118e:	9406      	str	r4, [sp, #24]
 8001190:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_GPIO_Init+0x70>)
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	f042 0210 	orr.w	r2, r2, #16
 800119a:	619a      	str	r2, [r3, #24]
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	f002 0210 	and.w	r2, r2, #16
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	f042 0220 	orr.w	r2, r2, #32
 80011ac:	619a      	str	r2, [r3, #24]
 80011ae:	699a      	ldr	r2, [r3, #24]
 80011b0:	f002 0220 	and.w	r2, r2, #32
 80011b4:	9202      	str	r2, [sp, #8]
 80011b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	699a      	ldr	r2, [r3, #24]
 80011ba:	f042 0204 	orr.w	r2, r2, #4
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	9303      	str	r3, [sp, #12]
 80011c8:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011ca:	4d0b      	ldr	r5, [pc, #44]	; (80011f8 <MX_GPIO_Init+0x74>)
 80011cc:	4622      	mov	r2, r4
 80011ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff f956 	bl	8000484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2302      	movs	r3, #2
 80011e6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	a904      	add	r1, sp, #16
 80011ea:	4628      	mov	r0, r5
 80011ec:	f7ff f860 	bl	80002b0 <HAL_GPIO_Init>

}
 80011f0:	b009      	add	sp, #36	; 0x24
 80011f2:	bd30      	pop	{r4, r5, pc}
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40011000 	.word	0x40011000

080011fc <MX_TIM3_Init>:
{
 80011fc:	b530      	push	{r4, r5, lr}
 80011fe:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001200:	2400      	movs	r4, #0
 8001202:	9402      	str	r4, [sp, #8]
 8001204:	9403      	str	r4, [sp, #12]
 8001206:	9404      	str	r4, [sp, #16]
 8001208:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120a:	9400      	str	r4, [sp, #0]
 800120c:	9401      	str	r4, [sp, #4]
  htim3.Instance = TIM3;
 800120e:	4d0f      	ldr	r5, [pc, #60]	; (800124c <MX_TIM3_Init+0x50>)
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_TIM3_Init+0x54>)
 8001212:	602b      	str	r3, [r5, #0]
  htim3.Init.Prescaler = 35999;
 8001214:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8001218:	606b      	str	r3, [r5, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 50;
 800121c:	2332      	movs	r3, #50	; 0x32
 800121e:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001220:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001226:	4628      	mov	r0, r5
 8001228:	f7ff fe88 	bl	8000f3c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001232:	a902      	add	r1, sp, #8
 8001234:	4628      	mov	r0, r5
 8001236:	f7ff fd02 	bl	8000c3e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123e:	4669      	mov	r1, sp
 8001240:	4628      	mov	r0, r5
 8001242:	f7ff ff73 	bl	800112c <HAL_TIMEx_MasterConfigSynchronization>
}
 8001246:	b007      	add	sp, #28
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	bf00      	nop
 800124c:	2000002c 	.word	0x2000002c
 8001250:	40000400 	.word	0x40000400

08001254 <MX_TIM2_Init>:
{
 8001254:	b530      	push	{r4, r5, lr}
 8001256:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001258:	2400      	movs	r4, #0
 800125a:	940a      	str	r4, [sp, #40]	; 0x28
 800125c:	940b      	str	r4, [sp, #44]	; 0x2c
 800125e:	940c      	str	r4, [sp, #48]	; 0x30
 8001260:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	9408      	str	r4, [sp, #32]
 8001264:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001266:	9401      	str	r4, [sp, #4]
 8001268:	9402      	str	r4, [sp, #8]
 800126a:	9403      	str	r4, [sp, #12]
 800126c:	9404      	str	r4, [sp, #16]
 800126e:	9405      	str	r4, [sp, #20]
 8001270:	9406      	str	r4, [sp, #24]
 8001272:	9407      	str	r4, [sp, #28]
  htim2.Instance = TIM2;
 8001274:	4d1b      	ldr	r5, [pc, #108]	; (80012e4 <MX_TIM2_Init+0x90>)
 8001276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127a:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 0;
 800127c:	606c      	str	r4, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 0;
 8001280:	60ec      	str	r4, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001288:	4628      	mov	r0, r5
 800128a:	f7ff fe57 	bl	8000f3c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001294:	a90a      	add	r1, sp, #40	; 0x28
 8001296:	4628      	mov	r0, r5
 8001298:	f7ff fcd1 	bl	8000c3e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800129c:	4628      	mov	r0, r5
 800129e:	f7ff fe66 	bl	8000f6e <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	9408      	str	r4, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	a908      	add	r1, sp, #32
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff ff3f 	bl	800112c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80012b2:	9402      	str	r4, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b4:	9403      	str	r4, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b8:	2204      	movs	r2, #4
 80012ba:	eb0d 0102 	add.w	r1, sp, r2
 80012be:	4628      	mov	r0, r5
 80012c0:	f7ff fea0 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c4:	2208      	movs	r2, #8
 80012c6:	a901      	add	r1, sp, #4
 80012c8:	4628      	mov	r0, r5
 80012ca:	f7ff fe9b 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012ce:	220c      	movs	r2, #12
 80012d0:	a901      	add	r1, sp, #4
 80012d2:	4628      	mov	r0, r5
 80012d4:	f7ff fe96 	bl	8001004 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 80012d8:	4628      	mov	r0, r5
 80012da:	f000 f8fb 	bl	80014d4 <HAL_TIM_MspPostInit>
}
 80012de:	b00f      	add	sp, #60	; 0x3c
 80012e0:	bd30      	pop	{r4, r5, pc}
 80012e2:	bf00      	nop
 80012e4:	2000006c 	.word	0x2000006c

080012e8 <SystemClock_Config>:
{
 80012e8:	b530      	push	{r4, r5, lr}
 80012ea:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ec:	2400      	movs	r4, #0
 80012ee:	9408      	str	r4, [sp, #32]
 80012f0:	9409      	str	r4, [sp, #36]	; 0x24
 80012f2:	940b      	str	r4, [sp, #44]	; 0x2c
 80012f4:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f6:	9401      	str	r4, [sp, #4]
 80012f8:	9402      	str	r4, [sp, #8]
 80012fa:	9403      	str	r4, [sp, #12]
 80012fc:	9404      	str	r4, [sp, #16]
 80012fe:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2201      	movs	r2, #1
 8001302:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2502      	movs	r5, #2
 800130e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001310:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001316:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	a806      	add	r0, sp, #24
 800131a:	f7ff f8d3 	bl	80004c4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800131e:	230f      	movs	r3, #15
 8001320:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001322:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001324:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800132a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	4629      	mov	r1, r5
 8001330:	a801      	add	r0, sp, #4
 8001332:	f7ff faed 	bl	8000910 <HAL_RCC_ClockConfig>
}
 8001336:	b011      	add	sp, #68	; 0x44
 8001338:	bd30      	pop	{r4, r5, pc}
	...

0800133c <main>:
{
 800133c:	b508      	push	{r3, lr}
  HAL_Init();
 800133e:	f7fe ff2b 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8001342:	f7ff ffd1 	bl	80012e8 <SystemClock_Config>
  MX_GPIO_Init();
 8001346:	f7ff ff1d 	bl	8001184 <MX_GPIO_Init>
  MX_TIM3_Init();
 800134a:	f7ff ff57 	bl	80011fc <MX_TIM3_Init>
  MX_TIM2_Init();
 800134e:	f7ff ff81 	bl	8001254 <MX_TIM2_Init>
  HAL_TIM_Base_Start_IT(&htim3);//arranca el timer y cuando termina vuelve a contar
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <main+0x44>)
 8001354:	f7ff fc66 	bl	8000c24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//inicializo el PWM
 8001358:	4c0a      	ldr	r4, [pc, #40]	; (8001384 <main+0x48>)
 800135a:	2104      	movs	r1, #4
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fecd 	bl	80010fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001362:	2108      	movs	r1, #8
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff fec9 	bl	80010fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800136a:	210c      	movs	r1, #12
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff fec5 	bl	80010fc <HAL_TIM_PWM_Start>
  TIM2->CCR2 = 0;//inicializo el valor del duty del PWM
 8001372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001376:	2200      	movs	r2, #0
 8001378:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM2->CCR4 = 0;
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
 800137e:	e7fe      	b.n	800137e <main+0x42>
 8001380:	2000002c 	.word	0x2000002c
 8001384:	2000006c 	.word	0x2000006c

08001388 <HAL_TIM_PeriodElapsedCallback>:
 * Acá vuelvo luego de la int de cualquier timer, tengo que aclarar dentro
 * cual timer quiero ver en particular
 * saca el _weak antes del void
 * */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b508      	push	{r3, lr}
	if(htim->Instance== TIM3){
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800138e:	429a      	cmp	r2, r3
 8001390:	d000      	beq.n	8001394 <HAL_TIM_PeriodElapsedCallback+0xc>
		}

	}


}
 8001392:	bd08      	pop	{r3, pc}
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001394:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001398:	4820      	ldr	r0, [pc, #128]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800139a:	f7ff f879 	bl	8000490 <HAL_GPIO_TogglePin>
		if (TIM2->CCR2<= 64000)//Usamos este valor porque el maximo es 65k
 800139e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013a4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80013a8:	d805      	bhi.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x2e>
			TIM2->CCR2 +=1000;
 80013aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ae:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80013b0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013b4:	6393      	str	r3, [r2, #56]	; 0x38
		if (TIM2->CCR2 > 64000){
 80013b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013bc:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80013c0:	d9e7      	bls.n	8001392 <HAL_TIM_PeriodElapsedCallback+0xa>
			if (TIM2->CCR3<= 64000)
 80013c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c8:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80013cc:	d805      	bhi.n	80013da <HAL_TIM_PeriodElapsedCallback+0x52>
				TIM2->CCR3 +=1000;
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80013d4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013d8:	63d3      	str	r3, [r2, #60]	; 0x3c
			if (TIM2->CCR3 > 64000){
 80013da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80013e4:	d9d5      	bls.n	8001392 <HAL_TIM_PeriodElapsedCallback+0xa>
				if (TIM2->CCR4<= 64000)
 80013e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80013f0:	d805      	bhi.n	80013fe <HAL_TIM_PeriodElapsedCallback+0x76>
					TIM2->CCR4 +=1000;
 80013f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
				if (TIM2->CCR4 > 64000){
 80013fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8001408:	d9c3      	bls.n	8001392 <HAL_TIM_PeriodElapsedCallback+0xa>
					TIM2->CCR2 =0;
 800140a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800140e:	2200      	movs	r2, #0
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 =0;
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM2->CCR4 =0;
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001416:	e7bc      	b.n	8001392 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001418:	40000400 	.word	0x40000400
 800141c:	40011000 	.word	0x40011000

08001420 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_MspInit+0x3c>)
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	f042 0201 	orr.w	r2, r2, #1
 800142a:	619a      	str	r2, [r3, #24]
 800142c:	699a      	ldr	r2, [r3, #24]
 800142e:	f002 0201 	and.w	r2, r2, #1
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800143c:	61da      	str	r2, [r3, #28]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_MspInit+0x40>)
 800144a:	6853      	ldr	r3, [r2, #4]
 800144c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001454:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001456:	b002      	add	sp, #8
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	40010000 	.word	0x40010000

08001464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001464:	b500      	push	{lr}
 8001466:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8001468:	6803      	ldr	r3, [r0, #0]
 800146a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146e:	d005      	beq.n	800147c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001470:	4a16      	ldr	r2, [pc, #88]	; (80014cc <HAL_TIM_Base_MspInit+0x68>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d016      	beq.n	80014a4 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001476:	b003      	add	sp, #12
 8001478:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001480:	69da      	ldr	r2, [r3, #28]
 8001482:	f042 0201 	orr.w	r2, r2, #1
 8001486:	61da      	str	r2, [r3, #28]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	4611      	mov	r1, r2
 8001496:	201c      	movs	r0, #28
 8001498:	f7fe feb4 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800149c:	201c      	movs	r0, #28
 800149e:	f7fe fee5 	bl	800026c <HAL_NVIC_EnableIRQ>
 80014a2:	e7e8      	b.n	8001476 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_TIM_Base_MspInit+0x6c>)
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	f042 0202 	orr.w	r2, r2, #2
 80014ac:	61da      	str	r2, [r3, #28]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014b8:	2200      	movs	r2, #0
 80014ba:	4611      	mov	r1, r2
 80014bc:	201d      	movs	r0, #29
 80014be:	f7fe fea1 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014c2:	201d      	movs	r0, #29
 80014c4:	f7fe fed2 	bl	800026c <HAL_NVIC_EnableIRQ>
}
 80014c8:	e7d5      	b.n	8001476 <HAL_TIM_Base_MspInit+0x12>
 80014ca:	bf00      	nop
 80014cc:	40000400 	.word	0x40000400
 80014d0:	40021000 	.word	0x40021000

080014d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014d4:	b500      	push	{lr}
 80014d6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	9304      	str	r3, [sp, #16]
 80014e0:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 80014e2:	6803      	ldr	r3, [r0, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d002      	beq.n	80014f0 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80014ea:	b007      	add	sp, #28
 80014ec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	f042 0204 	orr.w	r2, r2, #4
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001506:	230e      	movs	r3, #14
 8001508:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001510:	a902      	add	r1, sp, #8
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <HAL_TIM_MspPostInit+0x48>)
 8001514:	f7fe fecc 	bl	80002b0 <HAL_GPIO_Init>
}
 8001518:	e7e7      	b.n	80014ea <HAL_TIM_MspPostInit+0x16>
 800151a:	bf00      	nop
 800151c:	40010800 	.word	0x40010800

08001520 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001520:	4770      	bx	lr

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	e7fe      	b.n	8001524 <MemManage_Handler>

08001526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler>

0800152a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	4770      	bx	lr

08001530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f7fe fe43 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bd08      	pop	{r3, pc}

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153a:	4802      	ldr	r0, [pc, #8]	; (8001544 <TIM2_IRQHandler+0xc>)
 800153c:	f7ff fc07 	bl	8000d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001540:	bd08      	pop	{r3, pc}
 8001542:	bf00      	nop
 8001544:	2000006c 	.word	0x2000006c

08001548 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001548:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800154a:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM3_IRQHandler+0xc>)
 800154c:	f7ff fbff 	bl	8000d4e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001550:	bd08      	pop	{r3, pc}
 8001552:	bf00      	nop
 8001554:	2000002c 	.word	0x2000002c

08001558 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <SystemInit+0x40>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f042 0201 	orr.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <SystemInit+0x44>)
 8001566:	400a      	ands	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001570:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001574:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800157c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001584:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001586:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800158a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <SystemInit+0x48>)
 800158e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001592:	609a      	str	r2, [r3, #8]
#endif 
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	f8ff0000 	.word	0xf8ff0000
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015a6:	e003      	b.n	80015b0 <LoopCopyDataInit>

080015a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ae:	3104      	adds	r1, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015b0:	480a      	ldr	r0, [pc, #40]	; (80015dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015b8:	d3f6      	bcc.n	80015a8 <CopyDataInit>
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015bc:	e002      	b.n	80015c4 <LoopFillZerobss>

080015be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015c0:	f842 3b04 	str.w	r3, [r2], #4

080015c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015c8:	d3f9      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ca:	f7ff ffc5 	bl	8001558 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f000 f80f 	bl	80015f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d2:	f7ff feb3 	bl	800133c <main>
  bx lr
 80015d6:	4770      	bx	lr
  ldr r3, =_sidata
 80015d8:	0800167c 	.word	0x0800167c
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80015e4:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80015e8:	200000ac 	.word	0x200000ac

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <__libc_init_array>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	2500      	movs	r5, #0
 80015f4:	4e0c      	ldr	r6, [pc, #48]	; (8001628 <__libc_init_array+0x38>)
 80015f6:	4c0d      	ldr	r4, [pc, #52]	; (800162c <__libc_init_array+0x3c>)
 80015f8:	1ba4      	subs	r4, r4, r6
 80015fa:	10a4      	asrs	r4, r4, #2
 80015fc:	42a5      	cmp	r5, r4
 80015fe:	d109      	bne.n	8001614 <__libc_init_array+0x24>
 8001600:	f000 f81a 	bl	8001638 <_init>
 8001604:	2500      	movs	r5, #0
 8001606:	4e0a      	ldr	r6, [pc, #40]	; (8001630 <__libc_init_array+0x40>)
 8001608:	4c0a      	ldr	r4, [pc, #40]	; (8001634 <__libc_init_array+0x44>)
 800160a:	1ba4      	subs	r4, r4, r6
 800160c:	10a4      	asrs	r4, r4, #2
 800160e:	42a5      	cmp	r5, r4
 8001610:	d105      	bne.n	800161e <__libc_init_array+0x2e>
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001618:	4798      	blx	r3
 800161a:	3501      	adds	r5, #1
 800161c:	e7ee      	b.n	80015fc <__libc_init_array+0xc>
 800161e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001622:	4798      	blx	r3
 8001624:	3501      	adds	r5, #1
 8001626:	e7f2      	b.n	800160e <__libc_init_array+0x1e>
 8001628:	08001674 	.word	0x08001674
 800162c:	08001674 	.word	0x08001674
 8001630:	08001674 	.word	0x08001674
 8001634:	08001678 	.word	0x08001678

08001638 <_init>:
 8001638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163a:	bf00      	nop
 800163c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800163e:	bc08      	pop	{r3}
 8001640:	469e      	mov	lr, r3
 8001642:	4770      	bx	lr

08001644 <_fini>:
 8001644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001646:	bf00      	nop
 8001648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164a:	bc08      	pop	{r3}
 800164c:	469e      	mov	lr, r3
 800164e:	4770      	bx	lr
